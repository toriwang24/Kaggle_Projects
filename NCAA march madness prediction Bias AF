{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91497,"databundleVersionId":11441828,"sourceType":"competition"},{"sourceId":11062994,"sourceType":"datasetVersion","datasetId":6893314},{"sourceId":11063125,"sourceType":"datasetVersion","datasetId":6893417}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"#### Aim to forecasting the outcomes of both the men's and women's 2025 collegiate basketball tournaments, by submitting predictions for every possible tournament matchup.\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2025-03-17T15:00:12.445499Z","iopub.execute_input":"2025-03-17T15:00:12.445925Z","iopub.status.idle":"2025-03-17T15:00:12.613066Z","shell.execute_reply.started":"2025-03-17T15:00:12.445891Z","shell.execute_reply":"2025-03-17T15:00:12.611772Z"}}},{"cell_type":"code","source":"#import require libraries\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport zipfile\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:03:52.994707Z","iopub.execute_input":"2025-03-18T13:03:52.995030Z","iopub.status.idle":"2025-03-18T13:03:55.438744Z","shell.execute_reply.started":"2025-03-18T13:03:52.995005Z","shell.execute_reply":"2025-03-18T13:03:55.437683Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"import zipfile\nimport os\n\ninput_dir = \"/kaggle/input/march-machine-learning-mania-2025\"\n\n# List files in the input directory\nfiles = os.listdir(input_dir)\n\nprint(files)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:03:55.440082Z","iopub.execute_input":"2025-03-18T13:03:55.440718Z","iopub.status.idle":"2025-03-18T13:03:55.446452Z","shell.execute_reply.started":"2025-03-18T13:03:55.440682Z","shell.execute_reply":"2025-03-18T13:03:55.445397Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"['Conferences.csv', 'SeedBenchmarkStage1.csv', 'WNCAATourneyDetailedResults.csv', 'WRegularSeasonCompactResults.csv', 'MNCAATourneySeedRoundSlots.csv', 'MRegularSeasonDetailedResults.csv', 'MNCAATourneyCompactResults.csv', 'MGameCities.csv', 'WSecondaryTourneyCompactResults.csv', 'WGameCities.csv', 'MSeasons.csv', 'WNCAATourneySlots.csv', 'MSecondaryTourneyTeams.csv', 'SampleSubmissionStage2.csv', 'Cities.csv', 'MTeamSpellings.csv', 'MRegularSeasonCompactResults.csv', 'MMasseyOrdinals.csv', 'MSecondaryTourneyCompactResults.csv', 'WTeams.csv', 'WConferenceTourneyGames.csv', 'MNCAATourneySlots.csv', 'MNCAATourneySeeds.csv', 'WNCAATourneyCompactResults.csv', 'WSeasons.csv', 'WNCAATourneySeeds.csv', 'MTeamCoaches.csv', 'MConferenceTourneyGames.csv', 'WRegularSeasonDetailedResults.csv', 'MNCAATourneyDetailedResults.csv', 'WTeamSpellings.csv', 'MTeamConferences.csv', 'MTeams.csv', 'WTeamConferences.csv', 'SampleSubmissionStage1.csv', 'WSecondaryTourneyTeams.csv']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"import pandas as pd\nimport glob\nimport os\n\ncsv_files = glob.glob(os.path.join(input_dir, \"*.csv\"))\n\n# Create a dictionary to store DataFrames\ndfs = {}\n\n# Read CSV files with different encoding\nfor file in csv_files:\n    file_name = os.path.basename(file)  # Extract filename\n    try:\n        df = pd.read_csv(file, encoding=\"utf-8\")  # Try UTF-8 first\n    except UnicodeDecodeError:\n        df = pd.read_csv(file, encoding=\"ISO-8859-1\")  # Try different encoding\n    dfs[file_name] = df  # Store in dictionary with filename as key\n\nprint(\"All CSV files loaded successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:03:55.448248Z","iopub.execute_input":"2025-03-18T13:03:55.448585Z","iopub.status.idle":"2025-03-18T13:04:00.587838Z","shell.execute_reply.started":"2025-03-18T13:03:55.448558Z","shell.execute_reply":"2025-03-18T13:04:00.586849Z"}},"outputs":[{"name":"stdout","text":"All CSV files loaded successfully!\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"for name, df in dfs.items():\n    print(f\"Loaded {name} with {df.shape[0]} rows and {df.shape[1]} columns\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:00.589383Z","iopub.execute_input":"2025-03-18T13:04:00.589740Z","iopub.status.idle":"2025-03-18T13:04:00.599810Z","shell.execute_reply.started":"2025-03-18T13:04:00.589714Z","shell.execute_reply":"2025-03-18T13:04:00.598812Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"Loaded Conferences.csv with 51 rows and 2 columns\nLoaded SeedBenchmarkStage1.csv with 507108 rows and 2 columns\nLoaded WNCAATourneyDetailedResults.csv with 894 rows and 34 columns\nLoaded WRegularSeasonCompactResults.csv with 137028 rows and 8 columns\nLoaded MNCAATourneySeedRoundSlots.csv with 776 rows and 5 columns\nLoaded MRegularSeasonDetailedResults.csv with 118882 rows and 34 columns\nLoaded MNCAATourneyCompactResults.csv with 2518 rows and 8 columns\nLoaded MGameCities.csv with 86668 rows and 6 columns\nLoaded WSecondaryTourneyCompactResults.csv with 828 rows and 9 columns\nLoaded WGameCities.csv with 83411 rows and 6 columns\nLoaded MSeasons.csv with 41 rows and 6 columns\nLoaded WNCAATourneySlots.csv with 1780 rows and 4 columns\nLoaded MSecondaryTourneyTeams.csv with 1836 rows and 3 columns\nLoaded SampleSubmissionStage2.csv with 131407 rows and 2 columns\nLoaded Cities.csv with 503 rows and 3 columns\nLoaded MTeamSpellings.csv with 1177 rows and 2 columns\nLoaded MRegularSeasonCompactResults.csv with 192930 rows and 8 columns\nLoaded MMasseyOrdinals.csv with 5546091 rows and 5 columns\nLoaded MSecondaryTourneyCompactResults.csv with 1809 rows and 9 columns\nLoaded WTeams.csv with 378 rows and 2 columns\nLoaded WConferenceTourneyGames.csv with 6481 rows and 5 columns\nLoaded MNCAATourneySlots.csv with 2586 rows and 4 columns\nLoaded MNCAATourneySeeds.csv with 2626 rows and 3 columns\nLoaded WNCAATourneyCompactResults.csv with 1650 rows and 8 columns\nLoaded WSeasons.csv with 28 rows and 6 columns\nLoaded WNCAATourneySeeds.csv with 1744 rows and 3 columns\nLoaded MTeamCoaches.csv with 13533 rows and 5 columns\nLoaded MConferenceTourneyGames.csv with 6793 rows and 5 columns\nLoaded WRegularSeasonDetailedResults.csv with 81708 rows and 34 columns\nLoaded MNCAATourneyDetailedResults.csv with 1382 rows and 34 columns\nLoaded WTeamSpellings.csv with 1170 rows and 2 columns\nLoaded MTeamConferences.csv with 13388 rows and 3 columns\nLoaded MTeams.csv with 380 rows and 4 columns\nLoaded WTeamConferences.csv with 9490 rows and 3 columns\nLoaded SampleSubmissionStage1.csv with 507108 rows and 2 columns\nLoaded WSecondaryTourneyTeams.csv with 824 rows and 3 columns\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":" ## Data Cleaning","metadata":{}},{"cell_type":"code","source":"for name, df in dfs.items():\n    print(f\"DataFrame for {name}:\")\n    print(df.head())  # Print first 5 rows of each DataFrame\n    print(\"\\n\" + \"=\"*50 + \"\\n\")  # Separator","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:00.600760Z","iopub.execute_input":"2025-03-18T13:04:00.601760Z","iopub.status.idle":"2025-03-18T13:04:00.736822Z","shell.execute_reply.started":"2025-03-18T13:04:00.601721Z","shell.execute_reply":"2025-03-18T13:04:00.735785Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"DataFrame for Conferences.csv:\n  ConfAbbrev                   Description\n0      a_sun       Atlantic Sun Conference\n1      a_ten        Atlantic 10 Conference\n2        aac  American Athletic Conference\n3        acc     Atlantic Coast Conference\n4        aec       America East Conference\n\n==================================================\n\nDataFrame for SeedBenchmarkStage1.csv:\n               ID  Pred\n0  2021_1101_1102  0.50\n1  2021_1101_1103  0.50\n2  2021_1101_1104  0.14\n3  2021_1101_1105  0.50\n4  2021_1101_1106  0.50\n\n==================================================\n\nDataFrame for WNCAATourneyDetailedResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2010     138     3124      69     3201      55    N      0    28    57   \n1    2010     138     3173      67     3395      66    N      0    23    59   \n2    2010     138     3181      72     3214      37    H      0    26    57   \n3    2010     138     3199      75     3256      61    H      0    25    63   \n4    2010     138     3207      62     3265      42    N      0    24    68   \n\n   ...  LFGA3  LFTM  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  \n0  ...     34     3     5   17   19    12   18     4     1   18  \n1  ...     27    14    15   18   26     8    8     8     6   22  \n2  ...     15     3     8   10   21     4   16     6     4   20  \n3  ...     20    17    22   16   21    13   16     5     4   24  \n4  ...     26    11    17   16   22     9   10     3     4   12  \n\n[5 rows x 34 columns]\n\n==================================================\n\nDataFrame for WRegularSeasonCompactResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT\n0    1998      18     3104      91     3202      41    H      0\n1    1998      18     3163      87     3221      76    H      0\n2    1998      18     3222      66     3261      59    H      0\n3    1998      18     3307      69     3365      62    H      0\n4    1998      18     3349     115     3411      35    H      0\n\n==================================================\n\nDataFrame for MNCAATourneySeedRoundSlots.csv:\n  Seed  GameRound GameSlot  EarlyDayNum  LateDayNum\n0  W01          1     R1W1          136         137\n1  W01          2     R2W1          138         139\n2  W01          3     R3W1          143         144\n3  W01          4     R4W1          145         146\n4  W01          5     R5WX          152         152\n\n==================================================\n\nDataFrame for MRegularSeasonDetailedResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2003      10     1104      68     1328      62    N      0    27    58   \n1    2003      10     1272      70     1393      63    N      0    26    62   \n2    2003      11     1266      73     1437      61    N      0    24    58   \n3    2003      11     1296      56     1457      50    N      0    18    38   \n4    2003      11     1400      77     1208      71    N      0    30    61   \n\n   ...  LFGA3  LFTM  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  \n0  ...     10    16    22   10   22     8   18     9     2   20  \n1  ...     24     9    20   20   25     7   12     8     6   16  \n2  ...     26    14    23   31   22     9   12     2     5   23  \n3  ...     22     8    15   17   20     9   19     4     3   23  \n4  ...     16    17    27   21   15    12   10     7     1   14  \n\n[5 rows x 34 columns]\n\n==================================================\n\nDataFrame for MNCAATourneyCompactResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT\n0    1985     136     1116      63     1234      54    N      0\n1    1985     136     1120      59     1345      58    N      0\n2    1985     136     1207      68     1250      43    N      0\n3    1985     136     1229      58     1425      55    N      0\n4    1985     136     1242      49     1325      38    N      0\n\n==================================================\n\nDataFrame for MGameCities.csv:\n   Season  DayNum  WTeamID  LTeamID   CRType  CityID\n0    2010       7     1143     1293  Regular    4027\n1    2010       7     1314     1198  Regular    4061\n2    2010       7     1326     1108  Regular    4080\n3    2010       7     1393     1107  Regular    4340\n4    2010       9     1143     1178  Regular    4027\n\n==================================================\n\nDataFrame for WSecondaryTourneyCompactResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  \\\n0    2013     135     3120      80     3412      57    H      0   \n1    2013     135     3140      69     3226      54    H      0   \n2    2013     135     3158      72     3297      70    A      0   \n3    2013     135     3183      60     3281      58    A      0   \n4    2013     135     3189      68     3184      61    H      0   \n\n  SecondaryTourney  \n0             WNIT  \n1             WNIT  \n2              WBI  \n3             WNIT  \n4              WBI  \n\n==================================================\n\nDataFrame for WGameCities.csv:\n   Season  DayNum  WTeamID  LTeamID   CRType  CityID\n0    2010      11     3103     3237  Regular    4002\n1    2010      11     3104     3399  Regular    4085\n2    2010      11     3110     3224  Regular    4363\n3    2010      11     3111     3267  Regular    4158\n4    2010      11     3119     3447  Regular    4367\n\n==================================================\n\nDataFrame for MSeasons.csv:\n   Season     DayZero RegionW    RegionX    RegionY    RegionZ\n0    1985  10/29/1984    East       West    Midwest  Southeast\n1    1986  10/28/1985    East    Midwest  Southeast       West\n2    1987  10/27/1986    East  Southeast    Midwest       West\n3    1988  11/02/1987    East    Midwest  Southeast       West\n4    1989  10/31/1988    East       West    Midwest  Southeast\n\n==================================================\n\nDataFrame for WNCAATourneySlots.csv:\n   Season  Slot StrongSeed WeakSeed\n0    1998  R1W1        W01      W16\n1    1998  R1W2        W02      W15\n2    1998  R1W3        W03      W14\n3    1998  R1W4        W04      W13\n4    1998  R1W5        W05      W12\n\n==================================================\n\nDataFrame for MSecondaryTourneyTeams.csv:\n   Season SecondaryTourney  TeamID\n0    1985              NIT    1108\n1    1985              NIT    1133\n2    1985              NIT    1139\n3    1985              NIT    1145\n4    1985              NIT    1151\n\n==================================================\n\nDataFrame for SampleSubmissionStage2.csv:\n               ID  Pred\n0  2025_1101_1102   0.5\n1  2025_1101_1103   0.5\n2  2025_1101_1104   0.5\n3  2025_1101_1105   0.5\n4  2025_1101_1106   0.5\n\n==================================================\n\nDataFrame for Cities.csv:\n   CityID         City State\n0    4001      Abilene    TX\n1    4002        Akron    OH\n2    4003       Albany    NY\n3    4004  Albuquerque    NM\n4    4005    Allentown    PA\n\n==================================================\n\nDataFrame for MTeamSpellings.csv:\n     TeamNameSpelling  TeamID\n0    a&m-corpus chris    1394\n1  a&m-corpus christi    1394\n2         abilene chr    1101\n3   abilene christian    1101\n4   abilene-christian    1101\n\n==================================================\n\nDataFrame for MRegularSeasonCompactResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT\n0    1985      20     1228      81     1328      64    N      0\n1    1985      25     1106      77     1354      70    H      0\n2    1985      25     1112      63     1223      56    H      0\n3    1985      25     1165      70     1432      54    H      0\n4    1985      25     1192      86     1447      74    H      0\n\n==================================================\n\nDataFrame for MMasseyOrdinals.csv:\n   Season  RankingDayNum SystemName  TeamID  OrdinalRank\n0    2003             35        SEL    1102          159\n1    2003             35        SEL    1103          229\n2    2003             35        SEL    1104           12\n3    2003             35        SEL    1105          314\n4    2003             35        SEL    1106          260\n\n==================================================\n\nDataFrame for MSecondaryTourneyCompactResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  \\\n0    1985     136     1151      67     1155      65    H      0   \n1    1985     136     1153      77     1245      61    H      0   \n2    1985     136     1201      79     1365      76    H      0   \n3    1985     136     1231      79     1139      57    H      0   \n4    1985     136     1249      78     1222      71    H      0   \n\n  SecondaryTourney  \n0              NIT  \n1              NIT  \n2              NIT  \n3              NIT  \n4              NIT  \n\n==================================================\n\nDataFrame for WTeams.csv:\n   TeamID     TeamName\n0    3101  Abilene Chr\n1    3102    Air Force\n2    3103        Akron\n3    3104      Alabama\n4    3105  Alabama A&M\n\n==================================================\n\nDataFrame for WConferenceTourneyGames.csv:\n   Season ConfAbbrev  DayNum  WTeamID  LTeamID\n0    2002      a_sun     129     3194     3144\n1    2002      a_sun     129     3209     3407\n2    2002      a_sun     129     3273     3125\n3    2002      a_sun     129     3391     3416\n4    2002      a_sun     130     3194     3273\n\n==================================================\n\nDataFrame for MNCAATourneySlots.csv:\n   Season  Slot StrongSeed WeakSeed\n0    1985  R1W1        W01      W16\n1    1985  R1W2        W02      W15\n2    1985  R1W3        W03      W14\n3    1985  R1W4        W04      W13\n4    1985  R1W5        W05      W12\n\n==================================================\n\nDataFrame for MNCAATourneySeeds.csv:\n   Season Seed  TeamID\n0    1985  W01    1207\n1    1985  W02    1210\n2    1985  W03    1228\n3    1985  W04    1260\n4    1985  W05    1374\n\n==================================================\n\nDataFrame for WNCAATourneyCompactResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT\n0    1998     137     3104      94     3422      46    H      0\n1    1998     137     3112      75     3365      63    H      0\n2    1998     137     3163      93     3193      52    H      0\n3    1998     137     3198      59     3266      45    H      0\n4    1998     137     3203      74     3208      72    A      0\n\n==================================================\n\nDataFrame for WSeasons.csv:\n   Season     DayZero RegionW  RegionX  RegionY  RegionZ\n0    1998  10/27/1997    East  Midwest  Mideast     West\n1    1999  10/26/1998    East  Mideast  Midwest     West\n2    2000  11/01/1999    East  Midwest  Mideast     West\n3    2001  10/30/2000    East  Midwest  Mideast     West\n4    2002  10/29/2001    East     West  Mideast  Midwest\n\n==================================================\n\nDataFrame for WNCAATourneySeeds.csv:\n   Season Seed  TeamID\n0    1998  W01    3330\n1    1998  W02    3163\n2    1998  W03    3112\n3    1998  W04    3301\n4    1998  W05    3272\n\n==================================================\n\nDataFrame for MTeamCoaches.csv:\n   Season  TeamID  FirstDayNum  LastDayNum       CoachName\n0    1985    1102            0         154   reggie_minton\n1    1985    1103            0         154     bob_huggins\n2    1985    1104            0         154  wimp_sanderson\n3    1985    1106            0         154    james_oliver\n4    1985    1108            0         154   davey_whitney\n\n==================================================\n\nDataFrame for MConferenceTourneyGames.csv:\n   Season ConfAbbrev  DayNum  WTeamID  LTeamID\n0    2001      a_sun     121     1194     1144\n1    2001      a_sun     121     1416     1240\n2    2001      a_sun     122     1209     1194\n3    2001      a_sun     122     1359     1239\n4    2001      a_sun     122     1391     1273\n\n==================================================\n\nDataFrame for WRegularSeasonDetailedResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2010      11     3103      63     3237      49    H      0    23    54   \n1    2010      11     3104      73     3399      68    N      0    26    62   \n2    2010      11     3110      71     3224      59    A      0    29    62   \n3    2010      11     3111      63     3267      58    A      0    27    52   \n4    2010      11     3119      74     3447      70    H      1    30    74   \n\n   ...  LFGA3  LFTM  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  \n0  ...     13     6    10   11   27    11   23     7     6   19  \n1  ...     21    14    27   14   26     7   20     4     2   27  \n2  ...     14    19    23   17   23     8   15     6     0   15  \n3  ...     26    16    25   22   22    15   11    14     5   14  \n4  ...     17    11    21   21   32    12   14     4     2   14  \n\n[5 rows x 34 columns]\n\n==================================================\n\nDataFrame for MNCAATourneyDetailedResults.csv:\n   Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  WFGA  \\\n0    2003     134     1421      92     1411      84    N      1    32    69   \n1    2003     136     1112      80     1436      51    N      0    31    66   \n2    2003     136     1113      84     1272      71    N      0    31    59   \n3    2003     136     1141      79     1166      73    N      0    29    53   \n4    2003     136     1143      76     1301      74    N      1    27    64   \n\n   ...  LFGA3  LFTM  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF  \n0  ...     31    14    31   17   28    16   15     5     0   22  \n1  ...     16     7     7    8   26    12   17    10     3   15  \n2  ...     28    14    21   20   22    11   12     2     5   18  \n3  ...     17    12    17   14   17    20   21     6     6   21  \n4  ...     21    15    20   10   26    16   14     5     8   19  \n\n[5 rows x 34 columns]\n\n==================================================\n\nDataFrame for WTeamSpellings.csv:\n     TeamNameSpelling  TeamID\n0    a&m-corpus chris    3394\n1  a&m-corpus christi    3394\n2         abilene chr    3101\n3   abilene christian    3101\n4   abilene-christian    3101\n\n==================================================\n\nDataFrame for MTeamConferences.csv:\n   Season  TeamID ConfAbbrev\n0    1985    1102        wac\n1    1985    1103        ovc\n2    1985    1104        sec\n3    1985    1106       swac\n4    1985    1108       swac\n\n==================================================\n\nDataFrame for MTeams.csv:\n   TeamID     TeamName  FirstD1Season  LastD1Season\n0    1101  Abilene Chr           2014          2025\n1    1102    Air Force           1985          2025\n2    1103        Akron           1985          2025\n3    1104      Alabama           1985          2025\n4    1105  Alabama A&M           2000          2025\n\n==================================================\n\nDataFrame for WTeamConferences.csv:\n   Season  TeamID ConfAbbrev\n0    1998    3102        wac\n1    1998    3103        mac\n2    1998    3104        sec\n3    1998    3106       swac\n4    1998    3108       swac\n\n==================================================\n\nDataFrame for SampleSubmissionStage1.csv:\n               ID  Pred\n0  2021_1101_1102   0.5\n1  2021_1101_1103   0.5\n2  2021_1101_1104   0.5\n3  2021_1101_1105   0.5\n4  2021_1101_1106   0.5\n\n==================================================\n\nDataFrame for WSecondaryTourneyTeams.csv:\n   Season SecondaryTourney  TeamID\n0    2013              WBI    3125\n1    2013              WBI    3158\n2    2013              WBI    3178\n3    2013              WBI    3184\n4    2013              WBI    3189\n\n==================================================\n\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"for name, df in dfs.items():\n    if((df.isnull().values.any())):\n        print(df.isnull().any())\n    print(\"\\n\" + \"=\"*50 + \"\\n\")  # Separator\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:00.737876Z","iopub.execute_input":"2025-03-18T13:04:00.738213Z","iopub.status.idle":"2025-03-18T13:04:01.135797Z","shell.execute_reply.started":"2025-03-18T13:04:00.738181Z","shell.execute_reply":"2025-03-18T13:04:01.134813Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n\n==================================================\n\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"for name, df in dfs.items():\n    df.drop_duplicates(inplace=True)\n    \nprint(\"duplicated values removed\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:01.136776Z","iopub.execute_input":"2025-03-18T13:04:01.137056Z","iopub.status.idle":"2025-03-18T13:04:03.168059Z","shell.execute_reply.started":"2025-03-18T13:04:01.137018Z","shell.execute_reply":"2025-03-18T13:04:03.166944Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"duplicated values removed\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"mseason, mteams, mncaatourseed, mncaatouresult, mregularseasonresult, mgamecity, mteamcoach, mordinals, mconfergames, msecondaryresult, mncaatourslots, mncaaseedroundslot= dfs['MSeasons.csv'],dfs['MTeams.csv'], dfs['MNCAATourneySeeds.csv'], dfs['MNCAATourneyDetailedResults.csv'], dfs['MRegularSeasonDetailedResults.csv'],dfs['MGameCities.csv'], dfs['MTeamCoaches.csv'], dfs['MMasseyOrdinals.csv'], dfs['MConferenceTourneyGames.csv'], dfs['MSecondaryTourneyCompactResults.csv'],dfs['MNCAATourneySlots.csv'], dfs['MNCAATourneySeedRoundSlots.csv']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:49.314987Z","iopub.execute_input":"2025-03-18T13:04:49.315439Z","iopub.status.idle":"2025-03-18T13:04:49.322357Z","shell.execute_reply.started":"2025-03-18T13:04:49.315383Z","shell.execute_reply":"2025-03-18T13:04:49.321217Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"## Analyze:","metadata":{}},{"cell_type":"code","source":"mncaatouresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:52.401502Z","iopub.execute_input":"2025-03-18T13:04:52.401875Z","iopub.status.idle":"2025-03-18T13:04:52.491121Z","shell.execute_reply.started":"2025-03-18T13:04:52.401845Z","shell.execute_reply":"2025-03-18T13:04:52.490251Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"            Season       DayNum      WTeamID       WScore      LTeamID  \\\ncount  1382.000000  1382.000000  1382.000000  1382.000000  1382.000000   \nmean   2013.301013   139.086831  1289.694645    75.431983  1293.123734   \nstd       6.315663     4.233378   102.879108    10.767408   105.822922   \nmin    2003.000000   134.000000  1101.000000    47.000000  1101.000000   \n25%    2008.000000   136.000000  1211.000000    68.000000  1209.000000   \n50%    2013.000000   137.000000  1277.000000    75.000000  1292.000000   \n75%    2018.000000   139.000000  1392.250000    82.000000  1393.000000   \nmax    2024.000000   154.000000  1463.000000   121.000000  1463.000000   \n\n            LScore        NumOT         WFGM         WFGA        WFGM3  ...  \\\ncount  1382.000000  1382.000000  1382.000000  1382.000000  1382.000000  ...   \nmean     63.753980     0.066570    26.486252    55.818379     7.109986  ...   \nstd      10.371463     0.284623     4.765556     7.215791     3.025032  ...   \nmin      29.000000     0.000000    13.000000    34.000000     0.000000  ...   \n25%      56.250000     0.000000    23.000000    51.000000     5.000000  ...   \n50%      63.000000     0.000000    26.000000    56.000000     7.000000  ...   \n75%      71.000000     0.000000    30.000000    60.000000     9.000000  ...   \nmax     105.000000     2.000000    44.000000    84.000000    18.000000  ...   \n\n             LFGA3         LFTM         LFTA          LOR          LDR  \\\ncount  1382.000000  1382.000000  1382.000000  1382.000000  1382.000000   \nmean     20.735890    11.540521    16.465991    10.663531    21.340087   \nstd       5.793864     5.092428     6.620897     4.217523     4.486375   \nmin       5.000000     0.000000     2.000000     1.000000     8.000000   \n25%      17.000000     8.000000    12.000000     8.000000    18.000000   \n50%      21.000000    11.000000    16.000000    10.000000    21.000000   \n75%      24.000000    15.000000    20.000000    13.000000    24.000000   \nmax      42.000000    31.000000    45.000000    29.000000    42.000000   \n\n             LAst          LTO         LStl         LBlk          LPF  \ncount  1382.00000  1382.000000  1382.000000  1382.000000  1382.000000  \nmean     11.43343    11.934877     5.688857     2.945007    18.606368  \nstd       3.66791     3.897505     2.644274     2.026226     4.222270  \nmin       2.00000     3.000000     0.000000     0.000000     7.000000  \n25%       9.00000     9.000000     4.000000     1.000000    16.000000  \n50%      11.00000    12.000000     6.000000     3.000000    18.000000  \n75%      14.00000    14.000000     7.000000     4.000000    21.000000  \nmax      23.00000    27.000000    19.000000    13.000000    33.000000  \n\n[8 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>WFGM3</th>\n      <th>...</th>\n      <th>LFGA3</th>\n      <th>LFTM</th>\n      <th>LFTA</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>...</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.00000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n      <td>1382.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2013.301013</td>\n      <td>139.086831</td>\n      <td>1289.694645</td>\n      <td>75.431983</td>\n      <td>1293.123734</td>\n      <td>63.753980</td>\n      <td>0.066570</td>\n      <td>26.486252</td>\n      <td>55.818379</td>\n      <td>7.109986</td>\n      <td>...</td>\n      <td>20.735890</td>\n      <td>11.540521</td>\n      <td>16.465991</td>\n      <td>10.663531</td>\n      <td>21.340087</td>\n      <td>11.43343</td>\n      <td>11.934877</td>\n      <td>5.688857</td>\n      <td>2.945007</td>\n      <td>18.606368</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6.315663</td>\n      <td>4.233378</td>\n      <td>102.879108</td>\n      <td>10.767408</td>\n      <td>105.822922</td>\n      <td>10.371463</td>\n      <td>0.284623</td>\n      <td>4.765556</td>\n      <td>7.215791</td>\n      <td>3.025032</td>\n      <td>...</td>\n      <td>5.793864</td>\n      <td>5.092428</td>\n      <td>6.620897</td>\n      <td>4.217523</td>\n      <td>4.486375</td>\n      <td>3.66791</td>\n      <td>3.897505</td>\n      <td>2.644274</td>\n      <td>2.026226</td>\n      <td>4.222270</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2003.000000</td>\n      <td>134.000000</td>\n      <td>1101.000000</td>\n      <td>47.000000</td>\n      <td>1101.000000</td>\n      <td>29.000000</td>\n      <td>0.000000</td>\n      <td>13.000000</td>\n      <td>34.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>5.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>1.000000</td>\n      <td>8.000000</td>\n      <td>2.00000</td>\n      <td>3.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2008.000000</td>\n      <td>136.000000</td>\n      <td>1211.000000</td>\n      <td>68.000000</td>\n      <td>1209.000000</td>\n      <td>56.250000</td>\n      <td>0.000000</td>\n      <td>23.000000</td>\n      <td>51.000000</td>\n      <td>5.000000</td>\n      <td>...</td>\n      <td>17.000000</td>\n      <td>8.000000</td>\n      <td>12.000000</td>\n      <td>8.000000</td>\n      <td>18.000000</td>\n      <td>9.00000</td>\n      <td>9.000000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>16.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2013.000000</td>\n      <td>137.000000</td>\n      <td>1277.000000</td>\n      <td>75.000000</td>\n      <td>1292.000000</td>\n      <td>63.000000</td>\n      <td>0.000000</td>\n      <td>26.000000</td>\n      <td>56.000000</td>\n      <td>7.000000</td>\n      <td>...</td>\n      <td>21.000000</td>\n      <td>11.000000</td>\n      <td>16.000000</td>\n      <td>10.000000</td>\n      <td>21.000000</td>\n      <td>11.00000</td>\n      <td>12.000000</td>\n      <td>6.000000</td>\n      <td>3.000000</td>\n      <td>18.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2018.000000</td>\n      <td>139.000000</td>\n      <td>1392.250000</td>\n      <td>82.000000</td>\n      <td>1393.000000</td>\n      <td>71.000000</td>\n      <td>0.000000</td>\n      <td>30.000000</td>\n      <td>60.000000</td>\n      <td>9.000000</td>\n      <td>...</td>\n      <td>24.000000</td>\n      <td>15.000000</td>\n      <td>20.000000</td>\n      <td>13.000000</td>\n      <td>24.000000</td>\n      <td>14.00000</td>\n      <td>14.000000</td>\n      <td>7.000000</td>\n      <td>4.000000</td>\n      <td>21.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2024.000000</td>\n      <td>154.000000</td>\n      <td>1463.000000</td>\n      <td>121.000000</td>\n      <td>1463.000000</td>\n      <td>105.000000</td>\n      <td>2.000000</td>\n      <td>44.000000</td>\n      <td>84.000000</td>\n      <td>18.000000</td>\n      <td>...</td>\n      <td>42.000000</td>\n      <td>31.000000</td>\n      <td>45.000000</td>\n      <td>29.000000</td>\n      <td>42.000000</td>\n      <td>23.00000</td>\n      <td>27.000000</td>\n      <td>19.000000</td>\n      <td>13.000000</td>\n      <td>33.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 33 columns</p>\n</div>"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"mconfergames.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:52.694003Z","iopub.execute_input":"2025-03-18T13:04:52.694440Z","iopub.status.idle":"2025-03-18T13:04:52.716974Z","shell.execute_reply.started":"2025-03-18T13:04:52.694384Z","shell.execute_reply":"2025-03-18T13:04:52.715871Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"            Season       DayNum      WTeamID      LTeamID\ncount  6793.000000  6793.000000  6793.000000  6793.000000\nmean   2013.310467   126.775946  1288.803474  1286.776682\nstd       7.186255     3.255352   105.053190   104.958585\nmin    2001.000000   115.000000  1101.000000  1101.000000\n25%    2007.000000   124.000000  1201.000000  1197.000000\n50%    2013.000000   128.000000  1287.000000  1284.000000\n75%    2019.000000   129.000000  1382.000000  1378.000000\nmax    2025.000000   132.000000  1478.000000  1478.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>LTeamID</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>6793.000000</td>\n      <td>6793.000000</td>\n      <td>6793.000000</td>\n      <td>6793.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2013.310467</td>\n      <td>126.775946</td>\n      <td>1288.803474</td>\n      <td>1286.776682</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>7.186255</td>\n      <td>3.255352</td>\n      <td>105.053190</td>\n      <td>104.958585</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2001.000000</td>\n      <td>115.000000</td>\n      <td>1101.000000</td>\n      <td>1101.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2007.000000</td>\n      <td>124.000000</td>\n      <td>1201.000000</td>\n      <td>1197.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2013.000000</td>\n      <td>128.000000</td>\n      <td>1287.000000</td>\n      <td>1284.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2019.000000</td>\n      <td>129.000000</td>\n      <td>1382.000000</td>\n      <td>1378.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2025.000000</td>\n      <td>132.000000</td>\n      <td>1478.000000</td>\n      <td>1478.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"mregularseasonresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:52.903997Z","iopub.execute_input":"2025-03-18T13:04:52.904354Z","iopub.status.idle":"2025-03-18T13:04:53.102467Z","shell.execute_reply.started":"2025-03-18T13:04:52.904324Z","shell.execute_reply":"2025-03-18T13:04:53.101370Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"              Season         DayNum        WTeamID         WScore  \\\ncount  118882.000000  118882.000000  118882.000000  118882.000000   \nmean     2014.249886      70.750383    1288.243065      75.901078   \nstd         6.570031      35.909233     105.373529      10.996122   \nmin      2003.000000       0.000000    1101.000000      34.000000   \n25%      2009.000000      40.000000    1199.000000      68.000000   \n50%      2014.000000      75.000000    1287.000000      75.000000   \n75%      2020.000000     102.000000    1381.000000      83.000000   \nmax      2025.000000     132.000000    1480.000000     149.000000   \n\n             LTeamID         LScore          NumOT           WFGM  \\\ncount  118882.000000  118882.000000  118882.000000  118882.000000   \nmean     1283.228117      63.920165       0.068707      26.411080   \nstd       104.837404      10.847639       0.305136       4.679376   \nmin      1101.000000      20.000000       0.000000      10.000000   \n25%      1192.000000      57.000000       0.000000      23.000000   \n50%      1282.000000      64.000000       0.000000      26.000000   \n75%      1374.000000      71.000000       0.000000      29.000000   \nmax      1480.000000     144.000000       6.000000      57.000000   \n\n                WFGA          WFGM3  ...          LFGA3           LFTM  \\\ncount  118882.000000  118882.000000  ...  118882.000000  118882.000000   \nmean       55.778924       7.356656  ...      20.184242      12.077724   \nstd         7.451063       3.122806  ...       6.071489       5.344507   \nmin        26.000000       0.000000  ...       1.000000       0.000000   \n25%        51.000000       5.000000  ...      16.000000       8.000000   \n50%        56.000000       7.000000  ...      20.000000      12.000000   \n75%        61.000000       9.000000  ...      24.000000      15.000000   \nmax       103.000000      26.000000  ...      59.000000      48.000000   \n\n                LFTA            LOR            LDR           LAst  \\\ncount  118882.000000  118882.000000  118882.000000  118882.000000   \nmean       17.730868      10.442885      21.618975      11.412560   \nstd         7.078725       4.219954       4.516069       3.724667   \nmin         0.000000       0.000000       4.000000       0.000000   \n25%        13.000000       7.000000      19.000000       9.000000   \n50%        17.000000      10.000000      21.000000      11.000000   \n75%        22.000000      13.000000      25.000000      14.000000   \nmax        65.000000      36.000000      49.000000      31.000000   \n\n                 LTO           LStl           LBlk            LPF  \ncount  118882.000000  118882.000000  118882.000000  118882.000000  \nmean       13.863074       6.005409       2.869770      19.287159  \nstd         4.385156       2.744967       2.018216       4.553560  \nmin         0.000000       0.000000       0.000000       4.000000  \n25%        11.000000       4.000000       1.000000      16.000000  \n50%        14.000000       6.000000       3.000000      19.000000  \n75%        17.000000       8.000000       4.000000      22.000000  \nmax        41.000000      22.000000      18.000000      45.000000  \n\n[8 rows x 33 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>WFGM3</th>\n      <th>...</th>\n      <th>LFGA3</th>\n      <th>LFTM</th>\n      <th>LFTA</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>...</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n      <td>118882.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2014.249886</td>\n      <td>70.750383</td>\n      <td>1288.243065</td>\n      <td>75.901078</td>\n      <td>1283.228117</td>\n      <td>63.920165</td>\n      <td>0.068707</td>\n      <td>26.411080</td>\n      <td>55.778924</td>\n      <td>7.356656</td>\n      <td>...</td>\n      <td>20.184242</td>\n      <td>12.077724</td>\n      <td>17.730868</td>\n      <td>10.442885</td>\n      <td>21.618975</td>\n      <td>11.412560</td>\n      <td>13.863074</td>\n      <td>6.005409</td>\n      <td>2.869770</td>\n      <td>19.287159</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6.570031</td>\n      <td>35.909233</td>\n      <td>105.373529</td>\n      <td>10.996122</td>\n      <td>104.837404</td>\n      <td>10.847639</td>\n      <td>0.305136</td>\n      <td>4.679376</td>\n      <td>7.451063</td>\n      <td>3.122806</td>\n      <td>...</td>\n      <td>6.071489</td>\n      <td>5.344507</td>\n      <td>7.078725</td>\n      <td>4.219954</td>\n      <td>4.516069</td>\n      <td>3.724667</td>\n      <td>4.385156</td>\n      <td>2.744967</td>\n      <td>2.018216</td>\n      <td>4.553560</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2003.000000</td>\n      <td>0.000000</td>\n      <td>1101.000000</td>\n      <td>34.000000</td>\n      <td>1101.000000</td>\n      <td>20.000000</td>\n      <td>0.000000</td>\n      <td>10.000000</td>\n      <td>26.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2009.000000</td>\n      <td>40.000000</td>\n      <td>1199.000000</td>\n      <td>68.000000</td>\n      <td>1192.000000</td>\n      <td>57.000000</td>\n      <td>0.000000</td>\n      <td>23.000000</td>\n      <td>51.000000</td>\n      <td>5.000000</td>\n      <td>...</td>\n      <td>16.000000</td>\n      <td>8.000000</td>\n      <td>13.000000</td>\n      <td>7.000000</td>\n      <td>19.000000</td>\n      <td>9.000000</td>\n      <td>11.000000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>16.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2014.000000</td>\n      <td>75.000000</td>\n      <td>1287.000000</td>\n      <td>75.000000</td>\n      <td>1282.000000</td>\n      <td>64.000000</td>\n      <td>0.000000</td>\n      <td>26.000000</td>\n      <td>56.000000</td>\n      <td>7.000000</td>\n      <td>...</td>\n      <td>20.000000</td>\n      <td>12.000000</td>\n      <td>17.000000</td>\n      <td>10.000000</td>\n      <td>21.000000</td>\n      <td>11.000000</td>\n      <td>14.000000</td>\n      <td>6.000000</td>\n      <td>3.000000</td>\n      <td>19.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2020.000000</td>\n      <td>102.000000</td>\n      <td>1381.000000</td>\n      <td>83.000000</td>\n      <td>1374.000000</td>\n      <td>71.000000</td>\n      <td>0.000000</td>\n      <td>29.000000</td>\n      <td>61.000000</td>\n      <td>9.000000</td>\n      <td>...</td>\n      <td>24.000000</td>\n      <td>15.000000</td>\n      <td>22.000000</td>\n      <td>13.000000</td>\n      <td>25.000000</td>\n      <td>14.000000</td>\n      <td>17.000000</td>\n      <td>8.000000</td>\n      <td>4.000000</td>\n      <td>22.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2025.000000</td>\n      <td>132.000000</td>\n      <td>1480.000000</td>\n      <td>149.000000</td>\n      <td>1480.000000</td>\n      <td>144.000000</td>\n      <td>6.000000</td>\n      <td>57.000000</td>\n      <td>103.000000</td>\n      <td>26.000000</td>\n      <td>...</td>\n      <td>59.000000</td>\n      <td>48.000000</td>\n      <td>65.000000</td>\n      <td>36.000000</td>\n      <td>49.000000</td>\n      <td>31.000000</td>\n      <td>41.000000</td>\n      <td>22.000000</td>\n      <td>18.000000</td>\n      <td>45.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 33 columns</p>\n</div>"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"msecondaryresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:54.668193Z","iopub.execute_input":"2025-03-18T13:04:54.668572Z","iopub.status.idle":"2025-03-18T13:04:54.697199Z","shell.execute_reply.started":"2025-03-18T13:04:54.668537Z","shell.execute_reply":"2025-03-18T13:04:54.696312Z"}},"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"            Season       DayNum      WTeamID       WScore      LTeamID  \\\ncount  1809.000000  1809.000000  1809.000000  1809.000000  1809.000000   \nmean   2007.247098   138.669983  1299.443892    76.576009  1288.742952   \nstd      10.920229     4.581126   102.366345    10.623999   105.596110   \nmin    1985.000000   133.000000  1101.000000    42.000000  1101.000000   \n25%    1999.000000   135.000000  1208.000000    69.000000  1199.000000   \n50%    2010.000000   137.000000  1310.000000    76.000000  1292.000000   \n75%    2016.000000   141.000000  1387.000000    83.000000  1382.000000   \nmax    2024.000000   152.000000  1470.000000   120.000000  1475.000000   \n\n            LScore        NumOT  \ncount  1809.000000  1809.000000  \nmean     66.959093     0.063018  \nstd      10.587211     0.277090  \nmin      34.000000     0.000000  \n25%      60.000000     0.000000  \n50%      66.000000     0.000000  \n75%      74.000000     0.000000  \nmax     112.000000     3.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>NumOT</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1809.000000</td>\n      <td>1809.000000</td>\n      <td>1809.000000</td>\n      <td>1809.000000</td>\n      <td>1809.000000</td>\n      <td>1809.000000</td>\n      <td>1809.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2007.247098</td>\n      <td>138.669983</td>\n      <td>1299.443892</td>\n      <td>76.576009</td>\n      <td>1288.742952</td>\n      <td>66.959093</td>\n      <td>0.063018</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>10.920229</td>\n      <td>4.581126</td>\n      <td>102.366345</td>\n      <td>10.623999</td>\n      <td>105.596110</td>\n      <td>10.587211</td>\n      <td>0.277090</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1985.000000</td>\n      <td>133.000000</td>\n      <td>1101.000000</td>\n      <td>42.000000</td>\n      <td>1101.000000</td>\n      <td>34.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1999.000000</td>\n      <td>135.000000</td>\n      <td>1208.000000</td>\n      <td>69.000000</td>\n      <td>1199.000000</td>\n      <td>60.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2010.000000</td>\n      <td>137.000000</td>\n      <td>1310.000000</td>\n      <td>76.000000</td>\n      <td>1292.000000</td>\n      <td>66.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2016.000000</td>\n      <td>141.000000</td>\n      <td>1387.000000</td>\n      <td>83.000000</td>\n      <td>1382.000000</td>\n      <td>74.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2024.000000</td>\n      <td>152.000000</td>\n      <td>1470.000000</td>\n      <td>120.000000</td>\n      <td>1475.000000</td>\n      <td>112.000000</td>\n      <td>3.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"# Merging dataset\nmncaatouresult['Gametype'] = 'MNCAAtour'\nmregularseasonresult['Gametype'] = 'MRegularseason'\nmsecondaryresult['Gametype'] = 'msecondary'\nmerge_df = pd.concat([mncaatouresult,mregularseasonresult])\nmerge_df['Outcome'] = 1\n\n# Create a reversed version of the data, so that each game appears twice.\n\nmerge_reverse = merge_df.copy()\nfeatures_to_swap = ['FGM', 'FGA', 'FGM3', 'FGA3', 'FTM', 'FTA', 'OR', 'DR', 'Ast', 'TO', 'Stl', 'Blk', 'PF']\nfor feature in features_to_swap:\n    merge_reverse[['W' + feature, 'L' + feature]] = merge_reverse[['L' + feature, 'W' + feature]]\n    \nmerge_reverse['Outcome'] = 0\n\ndf = pd.concat([merge_df,merge_reverse])\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:56.583966Z","iopub.execute_input":"2025-03-18T13:04:56.584452Z","iopub.status.idle":"2025-03-18T13:04:56.889494Z","shell.execute_reply.started":"2025-03-18T13:04:56.584394Z","shell.execute_reply":"2025-03-18T13:04:56.888525Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"        Season  DayNum  WTeamID  WScore  LTeamID  LScore WLoc  NumOT  WFGM  \\\n0         2003     134     1421      92     1411      84    N      1    32   \n1         2003     136     1112      80     1436      51    N      0    31   \n2         2003     136     1113      84     1272      71    N      0    31   \n3         2003     136     1141      79     1166      73    N      0    29   \n4         2003     136     1143      76     1301      74    N      1    27   \n...        ...     ...      ...     ...      ...     ...  ...    ...   ...   \n118877    2025     132     1196      86     1397      77    N      0    22   \n118878    2025     132     1272      84     1412      72    N      0    24   \n118879    2025     132     1276      59     1458      53    N      0    15   \n118880    2025     132     1433      68     1206      63    N      0    19   \n118881    2025     132     1463      90     1165      84    N      0    29   \n\n        WFGA  ...  LFTA  LOR  LDR  LAst  LTO  LStl  LBlk  LPF        Gametype  \\\n0         69  ...    31   17   28    16   15     5     0   22       MNCAAtour   \n1         66  ...     7    8   26    12   17    10     3   15       MNCAAtour   \n2         59  ...    21   20   22    11   12     2     5   18       MNCAAtour   \n3         53  ...    17   14   17    20   21     6     6   21       MNCAAtour   \n4         64  ...    20   10   26    16   14     5     8   19       MNCAAtour   \n...      ...  ...   ...  ...  ...   ...  ...   ...   ...  ...             ...   \n118877    49  ...    28   15   24    11    8     6     1   25  MRegularseason   \n118878    69  ...    23   18   27    13   12    10     7   18  MRegularseason   \n118879    68  ...    13    6   34    14    8     3     2   16  MRegularseason   \n118880    56  ...    27   11   25    10   16     7     9   20  MRegularseason   \n118881    52  ...    21    7   20    15    3     5     0   17  MRegularseason   \n\n        Outcome  \n0             1  \n1             1  \n2             1  \n3             1  \n4             1  \n...         ...  \n118877        0  \n118878        0  \n118879        0  \n118880        0  \n118881        0  \n\n[240528 rows x 36 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>WLoc</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>...</th>\n      <th>LFTA</th>\n      <th>LOR</th>\n      <th>LDR</th>\n      <th>LAst</th>\n      <th>LTO</th>\n      <th>LStl</th>\n      <th>LBlk</th>\n      <th>LPF</th>\n      <th>Gametype</th>\n      <th>Outcome</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>134</td>\n      <td>1421</td>\n      <td>92</td>\n      <td>1411</td>\n      <td>84</td>\n      <td>N</td>\n      <td>1</td>\n      <td>32</td>\n      <td>69</td>\n      <td>...</td>\n      <td>31</td>\n      <td>17</td>\n      <td>28</td>\n      <td>16</td>\n      <td>15</td>\n      <td>5</td>\n      <td>0</td>\n      <td>22</td>\n      <td>MNCAAtour</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1112</td>\n      <td>80</td>\n      <td>1436</td>\n      <td>51</td>\n      <td>N</td>\n      <td>0</td>\n      <td>31</td>\n      <td>66</td>\n      <td>...</td>\n      <td>7</td>\n      <td>8</td>\n      <td>26</td>\n      <td>12</td>\n      <td>17</td>\n      <td>10</td>\n      <td>3</td>\n      <td>15</td>\n      <td>MNCAAtour</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1113</td>\n      <td>84</td>\n      <td>1272</td>\n      <td>71</td>\n      <td>N</td>\n      <td>0</td>\n      <td>31</td>\n      <td>59</td>\n      <td>...</td>\n      <td>21</td>\n      <td>20</td>\n      <td>22</td>\n      <td>11</td>\n      <td>12</td>\n      <td>2</td>\n      <td>5</td>\n      <td>18</td>\n      <td>MNCAAtour</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1141</td>\n      <td>79</td>\n      <td>1166</td>\n      <td>73</td>\n      <td>N</td>\n      <td>0</td>\n      <td>29</td>\n      <td>53</td>\n      <td>...</td>\n      <td>17</td>\n      <td>14</td>\n      <td>17</td>\n      <td>20</td>\n      <td>21</td>\n      <td>6</td>\n      <td>6</td>\n      <td>21</td>\n      <td>MNCAAtour</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1143</td>\n      <td>76</td>\n      <td>1301</td>\n      <td>74</td>\n      <td>N</td>\n      <td>1</td>\n      <td>27</td>\n      <td>64</td>\n      <td>...</td>\n      <td>20</td>\n      <td>10</td>\n      <td>26</td>\n      <td>16</td>\n      <td>14</td>\n      <td>5</td>\n      <td>8</td>\n      <td>19</td>\n      <td>MNCAAtour</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>118877</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1196</td>\n      <td>86</td>\n      <td>1397</td>\n      <td>77</td>\n      <td>N</td>\n      <td>0</td>\n      <td>22</td>\n      <td>49</td>\n      <td>...</td>\n      <td>28</td>\n      <td>15</td>\n      <td>24</td>\n      <td>11</td>\n      <td>8</td>\n      <td>6</td>\n      <td>1</td>\n      <td>25</td>\n      <td>MRegularseason</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>118878</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1272</td>\n      <td>84</td>\n      <td>1412</td>\n      <td>72</td>\n      <td>N</td>\n      <td>0</td>\n      <td>24</td>\n      <td>69</td>\n      <td>...</td>\n      <td>23</td>\n      <td>18</td>\n      <td>27</td>\n      <td>13</td>\n      <td>12</td>\n      <td>10</td>\n      <td>7</td>\n      <td>18</td>\n      <td>MRegularseason</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>118879</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1276</td>\n      <td>59</td>\n      <td>1458</td>\n      <td>53</td>\n      <td>N</td>\n      <td>0</td>\n      <td>15</td>\n      <td>68</td>\n      <td>...</td>\n      <td>13</td>\n      <td>6</td>\n      <td>34</td>\n      <td>14</td>\n      <td>8</td>\n      <td>3</td>\n      <td>2</td>\n      <td>16</td>\n      <td>MRegularseason</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>118880</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1433</td>\n      <td>68</td>\n      <td>1206</td>\n      <td>63</td>\n      <td>N</td>\n      <td>0</td>\n      <td>19</td>\n      <td>56</td>\n      <td>...</td>\n      <td>27</td>\n      <td>11</td>\n      <td>25</td>\n      <td>10</td>\n      <td>16</td>\n      <td>7</td>\n      <td>9</td>\n      <td>20</td>\n      <td>MRegularseason</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>118881</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1463</td>\n      <td>90</td>\n      <td>1165</td>\n      <td>84</td>\n      <td>N</td>\n      <td>0</td>\n      <td>29</td>\n      <td>52</td>\n      <td>...</td>\n      <td>21</td>\n      <td>7</td>\n      <td>20</td>\n      <td>15</td>\n      <td>3</td>\n      <td>5</td>\n      <td>0</td>\n      <td>17</td>\n      <td>MRegularseason</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>240528 rows × 36 columns</p>\n</div>"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"print(dfs['MTeamSpellings.csv'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:03.189111Z","iopub.status.idle":"2025-03-18T13:04:03.189566Z","shell.execute_reply":"2025-03-18T13:04:03.189380Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(dfs['WTeamSpellings.csv'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:03.190638Z","iopub.status.idle":"2025-03-18T13:04:03.191132Z","shell.execute_reply":"2025-03-18T13:04:03.190926Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Here's a concise rundown of the main data sources:\n\n* Teams Data (MTeams.csv, WTeams.csv):\nContains Team ID, Name, and the first and last Division I season for each team.\n\n* Seasons Data (MSeasons.csv, WSeasons.csv):\nLists seasons with key dates like DayZero for standardized day tracking.\n\n* Tournament Seeds (MNCAATourneySeeds.csv, WNCAATourneySeeds.csv):\n\nProvides tournament seeding information, including region and seed number.\n\n* Regular Season Results (MRegularSeasonCompactResults.csv, WRegularSeasonCompactResults.csv):\n\nGame results with winner/loser Team IDs, scores, and game location.\n\n* Tournament Results (MNCAATourneyCompactResults.csv, WNCAATourneyCompactResults.csv):\n\nSimilar to regular season results but specific to the NCAA tournament.\n* Submission File (SampleSubmissionStage1.csv):\n\nExample of the prediction submission format, including team matchups and predicted win percentages.\n* Team Box Scores (MRegularSeasonDetailedResults.csv, WRegularSeasonDetailedResults.csv):\n\nDetailed game stats (e.g., field goals, rebounds, assists) from both the winning and losing teams.\n* Team Spellings (MTeamSpellings.csv, WTeamSpellings.csv):\n\nHelps map external team references to consistent Team IDs.\n\n* Regular Season Detailed Results (MRegularSeasonDetailedResults.csv, WRegularSeasonDetailedResults.csv):\n\nProvide detailed team-level box scores for regular season games.\nMen's data is available from 2003, while women's data is from 2010 onwards.\nContains scores, fouls, rebounds, assists, etc.\nMissing data for some early women’s games, but recent data is complete.\n\n* NCAA Tournament Detailed Results (MNCAATourneyDetailedResults.csv, WNCAATourneyDetailedResults.csv):\n\nIncludes detailed box scores for NCAA Tournament games starting from 2003 (men) and 2010 (women).\nAll games in the Compact Results files have corresponding detailed data.\n* Cities and Game Locations (Cities.csv, MGameCities.csv, WGameCities.csv):\n\n* Cities.csv: Master list of cities where games were played, including state abbreviations.\n\n* MGameCities.csv & WGameCities.csv: Locations for games since 2010, including regular season, NCAA Tournament, and secondary tournaments.\nContains CityID for easy cross-referencing.\n\n* Public Rankings (MMasseyOrdinals.csv):\n\nProvides weekly ordinal rankings (e.g., #1, #2, etc.) for men's teams from different rating systems since 2003.\nRankings are linked to TeamID and marked with RankingDayNum.\n\n* Additional Information (Supplements):\n\n    * MTeamCoaches.csv: Tracks head coaches for each men's team per season.\n    * Conferences.csv: Lists Division I conferences since 1985.\n    * MTeamConferences.csv, WTeamConferences.csv: Tracks team conference affiliations.\n    * MConferenceTourneyGames.csv, WConferenceTourneyGames.csv: Details conference tournament games.\n    * MSecondaryTourneyTeams.csv, WSecondaryTourneyTeams.csv: Lists teams in secondary tournaments (e.g., NIT, CBI).\n    * MSecondaryTourneyCompactResults.csv, WSecondaryTourneyCompactResults.csv: Scores from secondary tournament games.\n    * MTeamSpellings.csv, WTeamSpellings.csv: Provides alternative spellings of team names for matching purposes.\n    * MNCAATourneySlots.csv, WNCAATourneySlots.csv: Tracks NCAA Tournament bracket progress and seed matchups.\n    * MNCAATourneySeedRoundSlots.csv: Maps men's tournament seeds to specific game rounds and days.","metadata":{}},{"cell_type":"markdown","source":"## Feature Engineering:\n","metadata":{}},{"cell_type":"code","source":"wteam_epoints = df.groupby(['Season','DayNum','WTeamID']).apply(lambda x: (x['WFGM'].sum() + 0.5 * x['WFGM3'].sum()) / x['WFGA'].sum() if x['WFGA'].sum() > 0 else 0).round(1)*100\nwteam_epoints = wteam_epoints.reset_index(name = 'efieldgoalpercent')\nprint('NCAA tour winning team effective field goal percentage:','\\n', wteam_epoints)\n\n\nlteam_epoints = df.groupby(['Season','DayNum','LTeamID']).apply(lambda x: (x['LFGM'].sum() + 0.5 * x['LFGM3'].sum()) / x['LFGA'].sum() if x['LFGA'].sum() > 0 else 0).round(1)*100\nlteam_epoints = lteam_epoints.reset_index(name = 'efieldgoalpercent')\nprint('NCAA tour losing team effective field goal percentage:','\\n', lteam_epoints)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:05:12.168191Z","iopub.execute_input":"2025-03-18T13:05:12.168551Z","iopub.status.idle":"2025-03-18T13:06:14.874647Z","shell.execute_reply.started":"2025-03-18T13:05:12.168522Z","shell.execute_reply":"2025-03-18T13:06:14.873634Z"}},"outputs":[{"name":"stderr","text":"<ipython-input-19-da368d57eb42>:1: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  wteam_epoints = df.groupby(['Season','DayNum','WTeamID']).apply(lambda x: (x['WFGM'].sum() + 0.5 * x['WFGM3'].sum()) / x['WFGA'].sum() if x['WFGA'].sum() > 0 else 0).round(1)*100\n","output_type":"stream"},{"name":"stdout","text":"NCAA tour winning team effective field goal percentage: \n         Season  DayNum  WTeamID  efieldgoalpercent\n0         2003      10     1104               50.0\n1         2003      10     1272               40.0\n2         2003      11     1266               40.0\n3         2003      11     1296               50.0\n4         2003      11     1400               50.0\n...        ...     ...      ...                ...\n120259    2025     132     1196               50.0\n120260    2025     132     1272               50.0\n120261    2025     132     1276               30.0\n120262    2025     132     1433               50.0\n120263    2025     132     1463               60.0\n\n[120264 rows x 4 columns]\nNCAA tour losing team effective field goal percentage: \n         Season  DayNum  LTeamID  efieldgoalpercent\n0         2003      10     1328               50.0\n1         2003      10     1393               40.0\n2         2003      11     1186               50.0\n3         2003      11     1208               50.0\n4         2003      11     1437               40.0\n...        ...     ...      ...                ...\n120259    2025     132     1165               60.0\n120260    2025     132     1206               50.0\n120261    2025     132     1397               50.0\n120262    2025     132     1412               50.0\n120263    2025     132     1458               30.0\n\n[120264 rows x 4 columns]\n","output_type":"stream"},{"name":"stderr","text":"<ipython-input-19-da368d57eb42>:6: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  lteam_epoints = df.groupby(['Season','DayNum','LTeamID']).apply(lambda x: (x['LFGM'].sum() + 0.5 * x['LFGM3'].sum()) / x['LFGA'].sum() if x['LFGA'].sum() > 0 else 0).round(1)*100\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"df['WFieldGoalPercentage'] = np.where(df['WFGA'] != 0, df['WFGM'] / df['WFGA'], 0)\ndf['WThreePointPercentage'] = np.where(df['WFGA3'] != 0, df['WFGM3'] / df['WFGA3'], 0)\ndf['WFreeThrowPercentage'] = np.where(df['WFTA'] != 0, df['WFTM'] / df['WFTA'], 0)\ndf['WEffectiveFieldGoalPercentage'] = np.where(df['WFGA'] != 0, (df['WFGM'] + 0.5 * df['WFGM3']) / df['WFGA'], 0)\ndf['WTrueShootingPercentage'] = np.where((2 * (df['WFGA'] + 0.475 * df['WFTA'])) != 0, df['WScore'] / (2 * (df['WFGA'] + 0.475 * df['WFTA'])), 0)\ndf['WTotalReboundRatio'] = np.where((df['LOR'] + df['LDR'] + df['WOR'] + df['WDR']) != 0,\n                                     (df['WOR'] + df['WDR']) / (df['LOR'] + df['LDR'] + df['WOR'] + df['WDR']),0)\ndf['WAssistTurnoverRatio'] = np.where(df['WTO'] != 0, df['WAst'] / df['WTO'], 0)\ndf['WStealTurnoverRatio'] = np.where(df['WTO'] != 0, df['WStl'] / df['WTO'], 0)\n\n\ndf['LFieldGoalPercentage'] = np.where(df['LFGA'] != 0, df['LFGM'] / df['LFGA'], 0)\ndf['LThreePointPercentage'] = np.where(df['LFGA3'] != 0, df['LFGM3'] / df['LFGA3'], 0)\ndf['LFreeThrowPercentage'] = np.where(df['LFTA'] != 0, df['LFTM'] / df['LFTA'], 0)\ndf['LEffectiveFieldGoalPercentage'] = np.where(df['LFGA'] != 0, (df['LFGM'] + 0.5 * df['LFGM3']) / df['LFGA'], 0)\ndf['LTrueShootingPercentage'] = np.where((2 * (df['LFGA'] + 0.475 * df['LFTA'])) != 0, df['LScore'] / (2 * (df['LFGA'] + 0.475 * df['LFTA'])), 0)\ndf['LTotalReboundRatio'] = np.where((df['WOR'] + df['WDR'] + df['LOR'] + df['LDR']) != 0,\n                                     (df['LOR'] + df['LDR']) / (df['WOR'] + df['WDR'] + df['LOR'] + df['LDR']),0)\ndf['LAssistTurnoverRatio'] = np.where(df['LTO'] != 0, df['LAst'] / df['LTO'], 0)\ndf['LStealTurnoverRatio'] = np.where(df['LTO'] != 0, df['LStl'] / df['LTO'], 0)\n\ndf['FieldGoalPercentage_diff'] = df['WFieldGoalPercentage'] - (df['LFGM'] / df['LFGA'])\ndf['ThreePointPercentage_diff'] = df['WThreePointPercentage'] - (df['LFGM3'] / df['LFGA3'])\ndf['FreeThrowPercentage_diff'] = df['WFreeThrowPercentage'] - (df['LFTM'] / df['LFTA'])\ndf['EffectiveFieldGoalPercentage_diff'] = df['WEffectiveFieldGoalPercentage'] - ((df['LFGM'] + 0.5 * df['LFGM3']) / df['LFGA'])\ndf['TrueShootingPercentage_diff'] = df['WTrueShootingPercentage'] - (df['LScore'] / (2 * (df['LFGA'] + 0.475 * df['LFTA'])))\n\ndf = df.drop('FreeThrowPercentage_diff', axis = 'columns')\n\ndummies = pd.get_dummies(df.Gametype)\ndf1 = pd.concat([df, dummies], axis = 'columns')\ndf_new = df1.drop(['Gametype','WLoc'], axis = 'columns')\ndf_new","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:06:14.876181Z","iopub.execute_input":"2025-03-18T13:06:14.876526Z","iopub.status.idle":"2025-03-18T13:06:15.442213Z","shell.execute_reply.started":"2025-03-18T13:06:14.876495Z","shell.execute_reply":"2025-03-18T13:06:15.441184Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"        Season  DayNum  WTeamID  WScore  LTeamID  LScore  NumOT  WFGM  WFGA  \\\n0         2003     134     1421      92     1411      84      1    32    69   \n1         2003     136     1112      80     1436      51      0    31    66   \n2         2003     136     1113      84     1272      71      0    31    59   \n3         2003     136     1141      79     1166      73      0    29    53   \n4         2003     136     1143      76     1301      74      1    27    64   \n...        ...     ...      ...     ...      ...     ...    ...   ...   ...   \n118877    2025     132     1196      86     1397      77      0    22    49   \n118878    2025     132     1272      84     1412      72      0    24    69   \n118879    2025     132     1276      59     1458      53      0    15    68   \n118880    2025     132     1433      68     1206      63      0    19    56   \n118881    2025     132     1463      90     1165      84      0    29    52   \n\n        WFGM3  ...  LTrueShootingPercentage  LTotalReboundRatio  \\\n0          11  ...                 0.513919            0.505618   \n1           7  ...                 0.378760            0.419753   \n2           6  ...                 0.449509            0.531646   \n3           3  ...                 0.536173            0.500000   \n4           7  ...                 0.564885            0.486486   \n...       ...  ...                      ...                 ...   \n118877      8  ...                 0.518170            0.609375   \n118878      7  ...                 0.456129            0.505618   \n118879      7  ...                 0.406598            0.465116   \n118880      9  ...                 0.526536            0.521739   \n118881     11  ...                 0.583536            0.473684   \n\n        LAssistTurnoverRatio  LStealTurnoverRatio  FieldGoalPercentage_diff  \\\n0                   1.066667             0.333333                  0.030932   \n1                   0.705882             0.588235                  0.157197   \n2                   0.916667             0.166667                  0.163105   \n3                   0.952381             0.285714                  0.097170   \n4                   1.142857             0.357143                 -0.024554   \n...                      ...                  ...                       ...   \n118877              1.375000             0.750000                  0.022750   \n118878              1.083333             0.833333                 -0.122762   \n118879              1.750000             0.375000                 -0.101446   \n118880              0.625000             0.437500                 -0.064970   \n118881              5.000000             1.666667                  0.057692   \n\n        ThreePointPercentage_diff  EffectiveFieldGoalPercentage_diff  \\\n0                       -0.007786                           0.021090   \n1                        0.054348                           0.178977   \n2                        0.178571                           0.163228   \n3                        0.016807                           0.067138   \n4                       -0.078571                          -0.050223   \n...                           ...                                ...   \n118877                  -0.025641                           0.030612   \n118878                  -0.202279                          -0.116155   \n118879                  -0.093240                          -0.126246   \n118880                   0.108571                          -0.069719   \n118881                  -0.157810                           0.058623   \n\n        TrueShootingPercentage_diff  MNCAAtour  MRegularseason  \n0                          0.051539       True           False  \n1                          0.171825       True           False  \n2                          0.155242       True           False  \n3                          0.072690       True           False  \n4                         -0.057712       True           False  \n...                             ...        ...             ...  \n118877                     0.151612      False            True  \n118878                     0.069363      False            True  \n118879                    -0.021229      False            True  \n118880                    -0.003660      False            True  \n118881                     0.171498      False            True  \n\n[240528 rows x 56 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Season</th>\n      <th>DayNum</th>\n      <th>WTeamID</th>\n      <th>WScore</th>\n      <th>LTeamID</th>\n      <th>LScore</th>\n      <th>NumOT</th>\n      <th>WFGM</th>\n      <th>WFGA</th>\n      <th>WFGM3</th>\n      <th>...</th>\n      <th>LTrueShootingPercentage</th>\n      <th>LTotalReboundRatio</th>\n      <th>LAssistTurnoverRatio</th>\n      <th>LStealTurnoverRatio</th>\n      <th>FieldGoalPercentage_diff</th>\n      <th>ThreePointPercentage_diff</th>\n      <th>EffectiveFieldGoalPercentage_diff</th>\n      <th>TrueShootingPercentage_diff</th>\n      <th>MNCAAtour</th>\n      <th>MRegularseason</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2003</td>\n      <td>134</td>\n      <td>1421</td>\n      <td>92</td>\n      <td>1411</td>\n      <td>84</td>\n      <td>1</td>\n      <td>32</td>\n      <td>69</td>\n      <td>11</td>\n      <td>...</td>\n      <td>0.513919</td>\n      <td>0.505618</td>\n      <td>1.066667</td>\n      <td>0.333333</td>\n      <td>0.030932</td>\n      <td>-0.007786</td>\n      <td>0.021090</td>\n      <td>0.051539</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1112</td>\n      <td>80</td>\n      <td>1436</td>\n      <td>51</td>\n      <td>0</td>\n      <td>31</td>\n      <td>66</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0.378760</td>\n      <td>0.419753</td>\n      <td>0.705882</td>\n      <td>0.588235</td>\n      <td>0.157197</td>\n      <td>0.054348</td>\n      <td>0.178977</td>\n      <td>0.171825</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1113</td>\n      <td>84</td>\n      <td>1272</td>\n      <td>71</td>\n      <td>0</td>\n      <td>31</td>\n      <td>59</td>\n      <td>6</td>\n      <td>...</td>\n      <td>0.449509</td>\n      <td>0.531646</td>\n      <td>0.916667</td>\n      <td>0.166667</td>\n      <td>0.163105</td>\n      <td>0.178571</td>\n      <td>0.163228</td>\n      <td>0.155242</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1141</td>\n      <td>79</td>\n      <td>1166</td>\n      <td>73</td>\n      <td>0</td>\n      <td>29</td>\n      <td>53</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0.536173</td>\n      <td>0.500000</td>\n      <td>0.952381</td>\n      <td>0.285714</td>\n      <td>0.097170</td>\n      <td>0.016807</td>\n      <td>0.067138</td>\n      <td>0.072690</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2003</td>\n      <td>136</td>\n      <td>1143</td>\n      <td>76</td>\n      <td>1301</td>\n      <td>74</td>\n      <td>1</td>\n      <td>27</td>\n      <td>64</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0.564885</td>\n      <td>0.486486</td>\n      <td>1.142857</td>\n      <td>0.357143</td>\n      <td>-0.024554</td>\n      <td>-0.078571</td>\n      <td>-0.050223</td>\n      <td>-0.057712</td>\n      <td>True</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>118877</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1196</td>\n      <td>86</td>\n      <td>1397</td>\n      <td>77</td>\n      <td>0</td>\n      <td>22</td>\n      <td>49</td>\n      <td>8</td>\n      <td>...</td>\n      <td>0.518170</td>\n      <td>0.609375</td>\n      <td>1.375000</td>\n      <td>0.750000</td>\n      <td>0.022750</td>\n      <td>-0.025641</td>\n      <td>0.030612</td>\n      <td>0.151612</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>118878</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1272</td>\n      <td>84</td>\n      <td>1412</td>\n      <td>72</td>\n      <td>0</td>\n      <td>24</td>\n      <td>69</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0.456129</td>\n      <td>0.505618</td>\n      <td>1.083333</td>\n      <td>0.833333</td>\n      <td>-0.122762</td>\n      <td>-0.202279</td>\n      <td>-0.116155</td>\n      <td>0.069363</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>118879</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1276</td>\n      <td>59</td>\n      <td>1458</td>\n      <td>53</td>\n      <td>0</td>\n      <td>15</td>\n      <td>68</td>\n      <td>7</td>\n      <td>...</td>\n      <td>0.406598</td>\n      <td>0.465116</td>\n      <td>1.750000</td>\n      <td>0.375000</td>\n      <td>-0.101446</td>\n      <td>-0.093240</td>\n      <td>-0.126246</td>\n      <td>-0.021229</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>118880</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1433</td>\n      <td>68</td>\n      <td>1206</td>\n      <td>63</td>\n      <td>0</td>\n      <td>19</td>\n      <td>56</td>\n      <td>9</td>\n      <td>...</td>\n      <td>0.526536</td>\n      <td>0.521739</td>\n      <td>0.625000</td>\n      <td>0.437500</td>\n      <td>-0.064970</td>\n      <td>0.108571</td>\n      <td>-0.069719</td>\n      <td>-0.003660</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>118881</th>\n      <td>2025</td>\n      <td>132</td>\n      <td>1463</td>\n      <td>90</td>\n      <td>1165</td>\n      <td>84</td>\n      <td>0</td>\n      <td>29</td>\n      <td>52</td>\n      <td>11</td>\n      <td>...</td>\n      <td>0.583536</td>\n      <td>0.473684</td>\n      <td>5.000000</td>\n      <td>1.666667</td>\n      <td>0.057692</td>\n      <td>-0.157810</td>\n      <td>0.058623</td>\n      <td>0.171498</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n<p>240528 rows × 56 columns</p>\n</div>"},"metadata":{}}],"execution_count":20},{"cell_type":"code","source":"df_new.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:09:08.737154Z","iopub.execute_input":"2025-03-18T13:09:08.737582Z","iopub.status.idle":"2025-03-18T13:09:08.743879Z","shell.execute_reply.started":"2025-03-18T13:09:08.737529Z","shell.execute_reply":"2025-03-18T13:09:08.742671Z"}},"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"Index(['Season', 'DayNum', 'WTeamID', 'WScore', 'LTeamID', 'LScore', 'NumOT',\n       'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst',\n       'WTO', 'WStl', 'WBlk', 'WPF', 'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM',\n       'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF', 'Outcome',\n       'WFieldGoalPercentage', 'WThreePointPercentage', 'WFreeThrowPercentage',\n       'WEffectiveFieldGoalPercentage', 'WTrueShootingPercentage',\n       'WTotalReboundRatio', 'WAssistTurnoverRatio', 'WStealTurnoverRatio',\n       'LFieldGoalPercentage', 'LThreePointPercentage', 'LFreeThrowPercentage',\n       'LEffectiveFieldGoalPercentage', 'LTrueShootingPercentage',\n       'LTotalReboundRatio', 'LAssistTurnoverRatio', 'LStealTurnoverRatio',\n       'FieldGoalPercentage_diff', 'ThreePointPercentage_diff',\n       'EffectiveFieldGoalPercentage_diff', 'TrueShootingPercentage_diff',\n       'MNCAAtour', 'MRegularseason'],\n      dtype='object')"},"metadata":{}}],"execution_count":26},{"cell_type":"markdown","source":"## Train the machine learning model:","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport itertools\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nX = df_new.drop(['Outcome'], axis = 'columns')\ny = df_new['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\nrf_model = RandomForestClassifier(n_estimators = 100, oob_score = True, warm_start = True, random_state = 42)\nrf_model.fit(X_train, y_train)\n\ny_predict = rf_model.predict(X_train)\n\ny_predict1 = rf_model.predict(X_test)\nprint(\"Training set accuracy score: \", accuracy_score(y_train,y_predict))\nprint(\"Test set accuracy score: \", accuracy_score(y_test,y_predict1))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:07:18.816928Z","iopub.execute_input":"2025-03-18T13:07:18.817278Z","iopub.status.idle":"2025-03-18T13:08:56.201560Z","shell.execute_reply.started":"2025-03-18T13:07:18.817249Z","shell.execute_reply":"2025-03-18T13:08:56.200514Z"}},"outputs":[{"name":"stdout","text":"Training set accuracy score:  1.0\nTest set accuracy score:  0.9576144347898391\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"## 2025-NCAA tournament prediction for men:","metadata":{}},{"cell_type":"code","source":"ncaa_new = dfs['SampleSubmissionStage2.csv']\nncaa_new[['Season', 'TeamID1', 'TeamID2']] = ncaa_new['ID'].str.split('_', expand = True)\nncaa_new = ncaa_new.drop(['ID','Pred'], axis = 'columns')\nncaa_new['TeamID1'] = ncaa_new['TeamID1'].astype(int)\nncaa_new['TeamID2'] = ncaa_new['TeamID2'].astype(int)\nncaa_new['Season'] = ncaa_new['Season'].astype(int)\nncaa_new = ncaa_new[(ncaa_new['TeamID1'] >= 1000) & (ncaa_new['TeamID1'] <= 1999) & (ncaa_new['TeamID2'] >= 1000) & (ncaa_new['TeamID2'] <= 1999)]\n\nteam_avg_stats = df_new.groupby(['Season', 'WTeamID']).mean().reset_index()\nncaa = pd.read_csv(\"../input/mteam-avg/team_avg1.csv\")\n\nncaa_predict = rf_model.predict(ncaa)\n#print(\"2025 NCAA new set of data accuracy score: \", accuracy_score(y_train,ncaa_predict))\nprobabilities = rf_model.predict_proba(ncaa)[:,1]\n\nmncaa_result = pd.DataFrame({\n    'ID': ncaa['Season'].astype(str) + '_' + ncaa['WTeamID'].astype(str) + '_' + ncaa['LTeamID'].astype(str),\n    'Pred': probabilities\n})\n\nmncaa_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:09:05.017401Z","iopub.execute_input":"2025-03-18T13:09:05.017724Z","iopub.status.idle":"2025-03-18T13:09:07.949745Z","shell.execute_reply.started":"2025-03-18T13:09:05.017699Z","shell.execute_reply":"2025-03-18T13:09:07.948761Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"                   ID  Pred\n0      2025_1101_1102  0.17\n1      2025_1101_1103  0.39\n2      2025_1101_1104  0.27\n3      2025_1101_1105  0.30\n4      2025_1101_1106  0.29\n...               ...   ...\n66061  2025_1477_1479  0.42\n66062  2025_1477_1480  0.43\n66063  2025_1478_1479  0.41\n66064  2025_1478_1480  0.44\n66065  2025_1479_1480  0.50\n\n[66066 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Pred</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025_1101_1102</td>\n      <td>0.17</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2025_1101_1103</td>\n      <td>0.39</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2025_1101_1104</td>\n      <td>0.27</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2025_1101_1105</td>\n      <td>0.30</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2025_1101_1106</td>\n      <td>0.29</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>66061</th>\n      <td>2025_1477_1479</td>\n      <td>0.42</td>\n    </tr>\n    <tr>\n      <th>66062</th>\n      <td>2025_1477_1480</td>\n      <td>0.43</td>\n    </tr>\n    <tr>\n      <th>66063</th>\n      <td>2025_1478_1479</td>\n      <td>0.41</td>\n    </tr>\n    <tr>\n      <th>66064</th>\n      <td>2025_1478_1480</td>\n      <td>0.44</td>\n    </tr>\n    <tr>\n      <th>66065</th>\n      <td>2025_1479_1480</td>\n      <td>0.50</td>\n    </tr>\n  </tbody>\n</table>\n<p>66066 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":25},{"cell_type":"markdown","source":"## Womens NCAA prediction:","metadata":{}},{"cell_type":"code","source":"wseason, wteams, wncaatourseed, wncaatouresult, wregularseasonresult, wgamecity,wconfergames, wsecondaryresult, wncaatourslots,= dfs['WSeasons.csv'],dfs['WTeams.csv'], dfs['WNCAATourneySeeds.csv'], dfs['WNCAATourneyDetailedResults.csv'], dfs['WRegularSeasonDetailedResults.csv'],dfs['WGameCities.csv'],dfs['WConferenceTourneyGames.csv'], dfs['WSecondaryTourneyCompactResults.csv'],dfs['WNCAATourneySlots.csv']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:36:49.432346Z","iopub.execute_input":"2025-03-17T14:36:49.432776Z","iopub.status.idle":"2025-03-17T14:36:49.438712Z","shell.execute_reply.started":"2025-03-17T14:36:49.432743Z","shell.execute_reply":"2025-03-17T14:36:49.437136Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wncaatouresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:36:58.286446Z","iopub.execute_input":"2025-03-17T14:36:58.286829Z","iopub.status.idle":"2025-03-17T14:36:58.361347Z","shell.execute_reply.started":"2025-03-17T14:36:58.286797Z","shell.execute_reply":"2025-03-17T14:36:58.360405Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wregularseasonresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:37:16.84892Z","iopub.execute_input":"2025-03-17T14:37:16.849393Z","iopub.status.idle":"2025-03-17T14:37:17.018106Z","shell.execute_reply.started":"2025-03-17T14:37:16.849361Z","shell.execute_reply":"2025-03-17T14:37:17.017205Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wconfergames.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:37:33.727906Z","iopub.execute_input":"2025-03-17T14:37:33.72825Z","iopub.status.idle":"2025-03-17T14:37:33.750217Z","shell.execute_reply.started":"2025-03-17T14:37:33.728224Z","shell.execute_reply":"2025-03-17T14:37:33.749246Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wsecondaryresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:37:51.264179Z","iopub.execute_input":"2025-03-17T14:37:51.264516Z","iopub.status.idle":"2025-03-17T14:37:51.298266Z","shell.execute_reply.started":"2025-03-17T14:37:51.264489Z","shell.execute_reply":"2025-03-17T14:37:51.297266Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# merging datasets\nwncaatouresult['Gametype'] = 'WNCAAtour'\nwregularseasonresult['Gametype'] = 'WRegularseason'\nwsecondaryresult['Gametype'] = 'Wsecondary'\nwmerge_df = pd.concat([wncaatouresult,wregularseasonresult])\nwmerge_df['Outcome'] = 1\n\n# Create a reversed version of the data, so that each game appears twice.\n\nwmerge_reverse = wmerge_df.copy()\nwfeatures_to_swap = ['FGM', 'FGA', 'FGM3', 'FGA3', 'FTM', 'FTA', 'OR', 'DR', 'Ast', 'TO', 'Stl', 'Blk', 'PF']\nfor feature in wfeatures_to_swap:\n    wmerge_reverse[['W' + feature, 'L' + feature]] = wmerge_reverse[['L' + feature, 'W' + feature]]\n    \nwmerge_reverse['Outcome'] = 0\n\ndf_w = pd.concat([wmerge_df,wmerge_reverse])\ndf_w = df_w.drop('WLoc', axis = 'columns')\ndf_w.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:38:34.8294Z","iopub.execute_input":"2025-03-17T14:38:34.829797Z","iopub.status.idle":"2025-03-17T14:38:34.996873Z","shell.execute_reply.started":"2025-03-17T14:38:34.829767Z","shell.execute_reply":"2025-03-17T14:38:34.99581Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Feature Engineering for women dataset:\n","metadata":{}},{"cell_type":"code","source":"df_w['WFieldGoalPercentage'] = np.where(df_w['WFGA'] != 0, df_w['WFGM'] / df_w['WFGA'], 0)\ndf_w['WThreePointPercentage'] = np.where(df_w['WFGA3'] != 0, df_w['WFGM3'] / df_w['WFGA3'], 0)\ndf_w['WFreeThrowPercentage'] = np.where(df_w['WFTA'] != 0, df_w['WFTM'] / df_w['WFTA'], 0)\ndf_w['WEffectiveFieldGoalPercentage'] = np.where(df_w['WFGA'] != 0, (df_w['WFGM'] + 0.5 * df_w['WFGM3']) / df_w['WFGA'], 0)\n#df_w['WTrueShootingPercentage'] = np.where((2 * (df_w['WFGA'] + 0.475 * df_w['WFTA'])) != 0, df_w['WScore'] / (2 * (df_w['WFGA'] + 0.475 * df['WFTA'])), 0)\ndf_w['WTotalReboundRatio'] = np.where((df_w['LOR'] + df_w['LDR'] + df_w['WOR'] + df_w['WDR']) != 0,\n                                     (df_w['WOR'] + df_w['WDR']) / (df_w['LOR'] + df_w['LDR'] + df_w['WOR'] + df_w['WDR']),0)\ndf_w['WAssistTurnoverRatio'] = np.where(df_w['WTO'] != 0, df_w['WAst'] / df_w['WTO'], 0)\ndf_w['WStealTurnoverRatio'] = np.where(df_w['WTO'] != 0, df_w['WStl'] / df_w['WTO'], 0)\n\n\ndf_w['LFieldGoalPercentage'] = np.where(df_w['LFGA'] != 0, df_w['LFGM'] / df_w['LFGA'], 0)\ndf_w['LThreePointPercentage'] = np.where(df_w['LFGA3'] != 0, df_w['LFGM3'] / df_w['LFGA3'], 0)\ndf_w['LFreeThrowPercentage'] = np.where(df_w['LFTA'] != 0, df_w['LFTM'] / df_w['LFTA'], 0)\ndf_w['LEffectiveFieldGoalPercentage'] = np.where(df_w['LFGA'] != 0, (df_w['LFGM'] + 0.5 * df_w['LFGM3']) / df_w['LFGA'], 0)\ndf_w['LTrueShootingPercentage'] = np.where((2 * (df_w['LFGA'] + 0.475 * df_w['LFTA'])) != 0, df_w['LScore'] / (2 * (df_w['LFGA'] + 0.475 * df_w['LFTA'])), 0)\ndf_w['LTotalReboundRatio'] = np.where((df_w['WOR'] + df_w['WDR'] + df_w['LOR'] + df_w['LDR']) != 0,\n                                     (df_w['LOR'] + df_w['LDR']) / (df_w['WOR'] + df_w['WDR'] + df_w['LOR'] + df_w['LDR']),0)\ndf_w['LAssistTurnoverRatio'] = np.where(df_w['LTO'] != 0, df_w['LAst'] / df_w['LTO'], 0)\ndf_w['LStealTurnoverRatio'] = np.where(df_w['LTO'] != 0, df_w['LStl'] / df_w['LTO'], 0)\n\ndf_w['FieldGoalPercentage_diff'] = df_w['WFieldGoalPercentage'] - (df_w['LFGM'] / df_w['LFGA'])\ndf_w['ThreePointPercentage_diff'] = df_w['WThreePointPercentage'] - (df_w['LFGM3'] / df_w['LFGA3'])\ndf_w['FreeThrowPercentage_diff'] = df_w['WFreeThrowPercentage'] - (df_w['LFTM'] / df_w['LFTA'])\ndf_w['EffectiveFieldGoalPercentage_diff'] = df_w['WEffectiveFieldGoalPercentage'] - ((df_w['LFGM'] + 0.5 * df_w['LFGM3']) / df_w['LFGA'])\n#df_w['TrueShootingPercentage_diff'] = df_w['WTrueShootingPercentage'] - (df_w['LScore'] / (2 * (df_w['LFGA'] + 0.475 * df_w['LFTA'])))\n\n#df = df.drop('FreeThrowPercentage_diff', axis = 'columns')\n\ndummies1 = pd.get_dummies(df_w.Gametype)\ndf_w1 = pd.concat([df_w, dummies1], axis = 'columns')\nw_df = df_w1.drop('Gametype', axis = 'columns')\nw_df = w_df.dropna()\nw_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:39:26.553707Z","iopub.execute_input":"2025-03-17T14:39:26.554062Z","iopub.status.idle":"2025-03-17T14:39:26.875371Z","shell.execute_reply.started":"2025-03-17T14:39:26.554033Z","shell.execute_reply":"2025-03-17T14:39:26.874338Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Train the machine learning model for women:","metadata":{}},{"cell_type":"code","source":"X_w = w_df.drop(['Outcome'], axis = 'columns')\ny_w = w_df['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X_w, y_w, test_size = 0.2, random_state = 42)\n\nrf_model_w = RandomForestClassifier(n_estimators = 100, oob_score = True, warm_start = True, random_state = 42)\nrf_model_w.fit(X_train, y_train)\n\ny_predict_w = rf_model_w.predict(X_train)\n\ny_predict_w1 = rf_model_w.predict(X_test)\nprint(\"Training set accuracy score: \", accuracy_score(y_train,y_predict_w))\nprint(\"Test set accuracy score: \", accuracy_score(y_test,y_predict_w1))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:40:33.187497Z","iopub.execute_input":"2025-03-17T14:40:33.187895Z","iopub.status.idle":"2025-03-17T14:41:38.026904Z","shell.execute_reply.started":"2025-03-17T14:40:33.187867Z","shell.execute_reply":"2025-03-17T14:41:38.025724Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 2025-NCAA tournament prediction for women:","metadata":{}},{"cell_type":"code","source":"w_ncaa_new = dfs['SampleSubmissionStage2.csv']\nw_ncaa_new[['Season', 'WTeamID', 'LTeamID']] = w_ncaa_new['ID'].str.split('_', expand = True)\nw_ncaa_new = w_ncaa_new.drop(['ID','Pred'], axis = 'columns')\nw_ncaa_new['WTeamID'] = w_ncaa_new['WTeamID'].astype(int)\nw_ncaa_new['LTeamID'] = w_ncaa_new['LTeamID'].astype(int)\nw_ncaa_new['Season'] = w_ncaa_new['Season'].astype(int)\nw_ncaa_new = w_ncaa_new[(w_ncaa_new['WTeamID'] >= 3000) & (w_ncaa_new['WTeamID'] <= 3999) & (w_ncaa_new['LTeamID'] >= 3000) & (w_ncaa_new['LTeamID'] <= 3999)]\n\nw_team_avg_stats = w_df.groupby(['Season', 'WTeamID']).mean().reset_index()\n\nncaa_w = pd.read_csv(\"../input/wstats-avg/w_ncaa.csv\")\n\nwncaa_predict = rf_model_w.predict(ncaa_w)\nw_probabilities = rf_model_w.predict_proba(ncaa_w)[:,1]\n\nwncaa_result = pd.DataFrame({\n    'ID': ncaa_w['Season'].astype(str) + '_' + ncaa_w['WTeamID'].astype(str) + '_' + ncaa_w['LTeamID'].astype(str),\n    'Pred': w_probabilities\n})\n\nwncaa_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:47:55.287896Z","iopub.execute_input":"2025-03-17T14:47:55.288305Z","iopub.status.idle":"2025-03-17T14:47:59.599041Z","shell.execute_reply.started":"2025-03-17T14:47:55.28827Z","shell.execute_reply":"2025-03-17T14:47:59.597824Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Final Prediction for both men and women(All possible matchup):","metadata":{}},{"cell_type":"code","source":"ncaa_final_prediction = pd.concat([mncaa_result,wncaa_result])\nprint(\"NCAA final prediction for both Men and Women\")\nncaa_final_prediction","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:50:49.360357Z","iopub.execute_input":"2025-03-17T14:50:49.360873Z","iopub.status.idle":"2025-03-17T14:50:49.385182Z","shell.execute_reply.started":"2025-03-17T14:50:49.360826Z","shell.execute_reply":"2025-03-17T14:50:49.38326Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}}]}