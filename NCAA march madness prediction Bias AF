{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91497,"databundleVersionId":11441828,"sourceType":"competition"},{"sourceId":11062994,"sourceType":"datasetVersion","datasetId":6893314},{"sourceId":11063125,"sourceType":"datasetVersion","datasetId":6893417}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"#### Aim to forecasting the outcomes of both the men's and women's 2025 collegiate basketball tournaments, by submitting predictions for every possible tournament matchup.\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2025-03-17T15:00:12.445499Z","iopub.execute_input":"2025-03-17T15:00:12.445925Z","iopub.status.idle":"2025-03-17T15:00:12.613066Z","shell.execute_reply.started":"2025-03-17T15:00:12.445891Z","shell.execute_reply":"2025-03-17T15:00:12.611772Z"}}},{"cell_type":"code","source":"#import require libraries\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split\nimport zipfile\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:03:52.994707Z","iopub.execute_input":"2025-03-18T13:03:52.995030Z","iopub.status.idle":"2025-03-18T13:03:55.438744Z","shell.execute_reply.started":"2025-03-18T13:03:52.995005Z","shell.execute_reply":"2025-03-18T13:03:55.437683Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import zipfile\nimport os\n\ninput_dir = \"/kaggle/input/march-machine-learning-mania-2025\"\n\n# List files in the input directory\nfiles = os.listdir(input_dir)\n\nprint(files)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:03:55.440082Z","iopub.execute_input":"2025-03-18T13:03:55.440718Z","iopub.status.idle":"2025-03-18T13:03:55.446452Z","shell.execute_reply.started":"2025-03-18T13:03:55.440682Z","shell.execute_reply":"2025-03-18T13:03:55.445397Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport glob\nimport os\n\ncsv_files = glob.glob(os.path.join(input_dir, \"*.csv\"))\n\n# Create a dictionary to store DataFrames\ndfs = {}\n\n# Read CSV files with different encoding\nfor file in csv_files:\n    file_name = os.path.basename(file)  # Extract filename\n    try:\n        df = pd.read_csv(file, encoding=\"utf-8\")  # Try UTF-8 first\n    except UnicodeDecodeError:\n        df = pd.read_csv(file, encoding=\"ISO-8859-1\")  # Try different encoding\n    dfs[file_name] = df  # Store in dictionary with filename as key\n\nprint(\"All CSV files loaded successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:03:55.448248Z","iopub.execute_input":"2025-03-18T13:03:55.448585Z","iopub.status.idle":"2025-03-18T13:04:00.587838Z","shell.execute_reply.started":"2025-03-18T13:03:55.448558Z","shell.execute_reply":"2025-03-18T13:04:00.586849Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for name, df in dfs.items():\n    print(f\"Loaded {name} with {df.shape[0]} rows and {df.shape[1]} columns\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:00.589383Z","iopub.execute_input":"2025-03-18T13:04:00.589740Z","iopub.status.idle":"2025-03-18T13:04:00.599810Z","shell.execute_reply.started":"2025-03-18T13:04:00.589714Z","shell.execute_reply":"2025-03-18T13:04:00.598812Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":" ## Data Cleaning","metadata":{}},{"cell_type":"code","source":"for name, df in dfs.items():\n    print(f\"DataFrame for {name}:\")\n    print(df.head())  # Print first 5 rows of each DataFrame\n    print(\"\\n\" + \"=\"*50 + \"\\n\")  # Separator","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:00.600760Z","iopub.execute_input":"2025-03-18T13:04:00.601760Z","iopub.status.idle":"2025-03-18T13:04:00.736822Z","shell.execute_reply.started":"2025-03-18T13:04:00.601721Z","shell.execute_reply":"2025-03-18T13:04:00.735785Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for name, df in dfs.items():\n    if((df.isnull().values.any())):\n        print(df.isnull().any())\n    print(\"\\n\" + \"=\"*50 + \"\\n\")  # Separator\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:00.737876Z","iopub.execute_input":"2025-03-18T13:04:00.738213Z","iopub.status.idle":"2025-03-18T13:04:01.135797Z","shell.execute_reply.started":"2025-03-18T13:04:00.738181Z","shell.execute_reply":"2025-03-18T13:04:01.134813Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for name, df in dfs.items():\n    df.drop_duplicates(inplace=True)\n    \nprint(\"duplicated values removed\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:01.136776Z","iopub.execute_input":"2025-03-18T13:04:01.137056Z","iopub.status.idle":"2025-03-18T13:04:03.168059Z","shell.execute_reply.started":"2025-03-18T13:04:01.137018Z","shell.execute_reply":"2025-03-18T13:04:03.166944Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"mseason, mteams, mncaatourseed, mncaatouresult, mregularseasonresult, mgamecity, mteamcoach, mordinals, mconfergames, msecondaryresult, mncaatourslots, mncaaseedroundslot= dfs['MSeasons.csv'],dfs['MTeams.csv'], dfs['MNCAATourneySeeds.csv'], dfs['MNCAATourneyDetailedResults.csv'], dfs['MRegularSeasonDetailedResults.csv'],dfs['MGameCities.csv'], dfs['MTeamCoaches.csv'], dfs['MMasseyOrdinals.csv'], dfs['MConferenceTourneyGames.csv'], dfs['MSecondaryTourneyCompactResults.csv'],dfs['MNCAATourneySlots.csv'], dfs['MNCAATourneySeedRoundSlots.csv']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:49.314987Z","iopub.execute_input":"2025-03-18T13:04:49.315439Z","iopub.status.idle":"2025-03-18T13:04:49.322357Z","shell.execute_reply.started":"2025-03-18T13:04:49.315383Z","shell.execute_reply":"2025-03-18T13:04:49.321217Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Analyze:","metadata":{}},{"cell_type":"code","source":"mncaatouresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:52.401502Z","iopub.execute_input":"2025-03-18T13:04:52.401875Z","iopub.status.idle":"2025-03-18T13:04:52.491121Z","shell.execute_reply.started":"2025-03-18T13:04:52.401845Z","shell.execute_reply":"2025-03-18T13:04:52.490251Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"mconfergames.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:52.694003Z","iopub.execute_input":"2025-03-18T13:04:52.694440Z","iopub.status.idle":"2025-03-18T13:04:52.716974Z","shell.execute_reply.started":"2025-03-18T13:04:52.694384Z","shell.execute_reply":"2025-03-18T13:04:52.715871Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"mregularseasonresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:52.903997Z","iopub.execute_input":"2025-03-18T13:04:52.904354Z","iopub.status.idle":"2025-03-18T13:04:53.102467Z","shell.execute_reply.started":"2025-03-18T13:04:52.904324Z","shell.execute_reply":"2025-03-18T13:04:53.101370Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"msecondaryresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:54.668193Z","iopub.execute_input":"2025-03-18T13:04:54.668572Z","iopub.status.idle":"2025-03-18T13:04:54.697199Z","shell.execute_reply.started":"2025-03-18T13:04:54.668537Z","shell.execute_reply":"2025-03-18T13:04:54.696312Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Merging dataset\nmncaatouresult['Gametype'] = 'MNCAAtour'\nmregularseasonresult['Gametype'] = 'MRegularseason'\nmsecondaryresult['Gametype'] = 'msecondary'\nmerge_df = pd.concat([mncaatouresult,mregularseasonresult])\nmerge_df['Outcome'] = 1\n\n# Create a reversed version of the data, so that each game appears twice.\n\nmerge_reverse = merge_df.copy()\nfeatures_to_swap = ['FGM', 'FGA', 'FGM3', 'FGA3', 'FTM', 'FTA', 'OR', 'DR', 'Ast', 'TO', 'Stl', 'Blk', 'PF']\nfor feature in features_to_swap:\n    merge_reverse[['W' + feature, 'L' + feature]] = merge_reverse[['L' + feature, 'W' + feature]]\n    \nmerge_reverse['Outcome'] = 0\n\ndf = pd.concat([merge_df,merge_reverse])\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:56.583966Z","iopub.execute_input":"2025-03-18T13:04:56.584452Z","iopub.status.idle":"2025-03-18T13:04:56.889494Z","shell.execute_reply.started":"2025-03-18T13:04:56.584394Z","shell.execute_reply":"2025-03-18T13:04:56.888525Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(dfs['MTeamSpellings.csv'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:03.189111Z","iopub.status.idle":"2025-03-18T13:04:03.189566Z","shell.execute_reply":"2025-03-18T13:04:03.189380Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(dfs['WTeamSpellings.csv'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:04:03.190638Z","iopub.status.idle":"2025-03-18T13:04:03.191132Z","shell.execute_reply":"2025-03-18T13:04:03.190926Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Here's a concise rundown of the main data sources:\n\n* Teams Data (MTeams.csv, WTeams.csv):\nContains Team ID, Name, and the first and last Division I season for each team.\n\n* Seasons Data (MSeasons.csv, WSeasons.csv):\nLists seasons with key dates like DayZero for standardized day tracking.\n\n* Tournament Seeds (MNCAATourneySeeds.csv, WNCAATourneySeeds.csv):\n\nProvides tournament seeding information, including region and seed number.\n\n* Regular Season Results (MRegularSeasonCompactResults.csv, WRegularSeasonCompactResults.csv):\n\nGame results with winner/loser Team IDs, scores, and game location.\n\n* Tournament Results (MNCAATourneyCompactResults.csv, WNCAATourneyCompactResults.csv):\n\nSimilar to regular season results but specific to the NCAA tournament.\n* Submission File (SampleSubmissionStage1.csv):\n\nExample of the prediction submission format, including team matchups and predicted win percentages.\n* Team Box Scores (MRegularSeasonDetailedResults.csv, WRegularSeasonDetailedResults.csv):\n\nDetailed game stats (e.g., field goals, rebounds, assists) from both the winning and losing teams.\n* Team Spellings (MTeamSpellings.csv, WTeamSpellings.csv):\n\nHelps map external team references to consistent Team IDs.\n\n* Regular Season Detailed Results (MRegularSeasonDetailedResults.csv, WRegularSeasonDetailedResults.csv):\n\nProvide detailed team-level box scores for regular season games.\nMen's data is available from 2003, while women's data is from 2010 onwards.\nContains scores, fouls, rebounds, assists, etc.\nMissing data for some early women’s games, but recent data is complete.\n\n* NCAA Tournament Detailed Results (MNCAATourneyDetailedResults.csv, WNCAATourneyDetailedResults.csv):\n\nIncludes detailed box scores for NCAA Tournament games starting from 2003 (men) and 2010 (women).\nAll games in the Compact Results files have corresponding detailed data.\n* Cities and Game Locations (Cities.csv, MGameCities.csv, WGameCities.csv):\n\n* Cities.csv: Master list of cities where games were played, including state abbreviations.\n\n* MGameCities.csv & WGameCities.csv: Locations for games since 2010, including regular season, NCAA Tournament, and secondary tournaments.\nContains CityID for easy cross-referencing.\n\n* Public Rankings (MMasseyOrdinals.csv):\n\nProvides weekly ordinal rankings (e.g., #1, #2, etc.) for men's teams from different rating systems since 2003.\nRankings are linked to TeamID and marked with RankingDayNum.\n\n* Additional Information (Supplements):\n\n    * MTeamCoaches.csv: Tracks head coaches for each men's team per season.\n    * Conferences.csv: Lists Division I conferences since 1985.\n    * MTeamConferences.csv, WTeamConferences.csv: Tracks team conference affiliations.\n    * MConferenceTourneyGames.csv, WConferenceTourneyGames.csv: Details conference tournament games.\n    * MSecondaryTourneyTeams.csv, WSecondaryTourneyTeams.csv: Lists teams in secondary tournaments (e.g., NIT, CBI).\n    * MSecondaryTourneyCompactResults.csv, WSecondaryTourneyCompactResults.csv: Scores from secondary tournament games.\n    * MTeamSpellings.csv, WTeamSpellings.csv: Provides alternative spellings of team names for matching purposes.\n    * MNCAATourneySlots.csv, WNCAATourneySlots.csv: Tracks NCAA Tournament bracket progress and seed matchups.\n    * MNCAATourneySeedRoundSlots.csv: Maps men's tournament seeds to specific game rounds and days.","metadata":{}},{"cell_type":"markdown","source":"## Feature Engineering:\n","metadata":{}},{"cell_type":"code","source":"wteam_epoints = df.groupby(['Season','DayNum','WTeamID']).apply(lambda x: (x['WFGM'].sum() + 0.5 * x['WFGM3'].sum()) / x['WFGA'].sum() if x['WFGA'].sum() > 0 else 0).round(1)*100\nwteam_epoints = wteam_epoints.reset_index(name = 'efieldgoalpercent')\nprint('NCAA tour winning team effective field goal percentage:','\\n', wteam_epoints)\n\n\nlteam_epoints = df.groupby(['Season','DayNum','LTeamID']).apply(lambda x: (x['LFGM'].sum() + 0.5 * x['LFGM3'].sum()) / x['LFGA'].sum() if x['LFGA'].sum() > 0 else 0).round(1)*100\nlteam_epoints = lteam_epoints.reset_index(name = 'efieldgoalpercent')\nprint('NCAA tour losing team effective field goal percentage:','\\n', lteam_epoints)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:05:12.168191Z","iopub.execute_input":"2025-03-18T13:05:12.168551Z","iopub.status.idle":"2025-03-18T13:06:14.874647Z","shell.execute_reply.started":"2025-03-18T13:05:12.168522Z","shell.execute_reply":"2025-03-18T13:06:14.873634Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['WFieldGoalPercentage'] = np.where(df['WFGA'] != 0, df['WFGM'] / df['WFGA'], 0)\ndf['WThreePointPercentage'] = np.where(df['WFGA3'] != 0, df['WFGM3'] / df['WFGA3'], 0)\ndf['WFreeThrowPercentage'] = np.where(df['WFTA'] != 0, df['WFTM'] / df['WFTA'], 0)\ndf['WEffectiveFieldGoalPercentage'] = np.where(df['WFGA'] != 0, (df['WFGM'] + 0.5 * df['WFGM3']) / df['WFGA'], 0)\ndf['WTrueShootingPercentage'] = np.where((2 * (df['WFGA'] + 0.475 * df['WFTA'])) != 0, df['WScore'] / (2 * (df['WFGA'] + 0.475 * df['WFTA'])), 0)\ndf['WTotalReboundRatio'] = np.where((df['LOR'] + df['LDR'] + df['WOR'] + df['WDR']) != 0,\n                                     (df['WOR'] + df['WDR']) / (df['LOR'] + df['LDR'] + df['WOR'] + df['WDR']),0)\ndf['WAssistTurnoverRatio'] = np.where(df['WTO'] != 0, df['WAst'] / df['WTO'], 0)\ndf['WStealTurnoverRatio'] = np.where(df['WTO'] != 0, df['WStl'] / df['WTO'], 0)\n\n\ndf['LFieldGoalPercentage'] = np.where(df['LFGA'] != 0, df['LFGM'] / df['LFGA'], 0)\ndf['LThreePointPercentage'] = np.where(df['LFGA3'] != 0, df['LFGM3'] / df['LFGA3'], 0)\ndf['LFreeThrowPercentage'] = np.where(df['LFTA'] != 0, df['LFTM'] / df['LFTA'], 0)\ndf['LEffectiveFieldGoalPercentage'] = np.where(df['LFGA'] != 0, (df['LFGM'] + 0.5 * df['LFGM3']) / df['LFGA'], 0)\ndf['LTrueShootingPercentage'] = np.where((2 * (df['LFGA'] + 0.475 * df['LFTA'])) != 0, df['LScore'] / (2 * (df['LFGA'] + 0.475 * df['LFTA'])), 0)\ndf['LTotalReboundRatio'] = np.where((df['WOR'] + df['WDR'] + df['LOR'] + df['LDR']) != 0,\n                                     (df['LOR'] + df['LDR']) / (df['WOR'] + df['WDR'] + df['LOR'] + df['LDR']),0)\ndf['LAssistTurnoverRatio'] = np.where(df['LTO'] != 0, df['LAst'] / df['LTO'], 0)\ndf['LStealTurnoverRatio'] = np.where(df['LTO'] != 0, df['LStl'] / df['LTO'], 0)\n\ndf['FieldGoalPercentage_diff'] = df['WFieldGoalPercentage'] - (df['LFGM'] / df['LFGA'])\ndf['ThreePointPercentage_diff'] = df['WThreePointPercentage'] - (df['LFGM3'] / df['LFGA3'])\ndf['FreeThrowPercentage_diff'] = df['WFreeThrowPercentage'] - (df['LFTM'] / df['LFTA'])\ndf['EffectiveFieldGoalPercentage_diff'] = df['WEffectiveFieldGoalPercentage'] - ((df['LFGM'] + 0.5 * df['LFGM3']) / df['LFGA'])\ndf['TrueShootingPercentage_diff'] = df['WTrueShootingPercentage'] - (df['LScore'] / (2 * (df['LFGA'] + 0.475 * df['LFTA'])))\n\ndf = df.drop('FreeThrowPercentage_diff', axis = 'columns')\n\ndummies = pd.get_dummies(df.Gametype)\ndf1 = pd.concat([df, dummies], axis = 'columns')\ndf_new = df1.drop(['Gametype','WLoc'], axis = 'columns')\ndf_new","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:06:14.876181Z","iopub.execute_input":"2025-03-18T13:06:14.876526Z","iopub.status.idle":"2025-03-18T13:06:15.442213Z","shell.execute_reply.started":"2025-03-18T13:06:14.876495Z","shell.execute_reply":"2025-03-18T13:06:15.441184Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df_new.columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:09:08.737154Z","iopub.execute_input":"2025-03-18T13:09:08.737582Z","iopub.status.idle":"2025-03-18T13:09:08.743879Z","shell.execute_reply.started":"2025-03-18T13:09:08.737529Z","shell.execute_reply":"2025-03-18T13:09:08.742671Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Train the machine learning model:","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nimport itertools\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nX = df_new.drop(['Outcome'], axis = 'columns')\ny = df_new['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\nrf_model = RandomForestClassifier(n_estimators = 100, oob_score = True, warm_start = True, random_state = 42)\nrf_model.fit(X_train, y_train)\n\ny_predict = rf_model.predict(X_train)\n\ny_predict1 = rf_model.predict(X_test)\nprint(\"Training set accuracy score: \", accuracy_score(y_train,y_predict))\nprint(\"Test set accuracy score: \", accuracy_score(y_test,y_predict1))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:07:18.816928Z","iopub.execute_input":"2025-03-18T13:07:18.817278Z","iopub.status.idle":"2025-03-18T13:08:56.201560Z","shell.execute_reply.started":"2025-03-18T13:07:18.817249Z","shell.execute_reply":"2025-03-18T13:08:56.200514Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 2025-NCAA tournament prediction for men:","metadata":{}},{"cell_type":"code","source":"ncaa_new = dfs['SampleSubmissionStage2.csv']\nncaa_new[['Season', 'TeamID1', 'TeamID2']] = ncaa_new['ID'].str.split('_', expand = True)\nncaa_new = ncaa_new.drop(['ID','Pred'], axis = 'columns')\nncaa_new['TeamID1'] = ncaa_new['TeamID1'].astype(int)\nncaa_new['TeamID2'] = ncaa_new['TeamID2'].astype(int)\nncaa_new['Season'] = ncaa_new['Season'].astype(int)\nncaa_new = ncaa_new[(ncaa_new['TeamID1'] >= 1000) & (ncaa_new['TeamID1'] <= 1999) & (ncaa_new['TeamID2'] >= 1000) & (ncaa_new['TeamID2'] <= 1999)]\n\nteam_avg_stats = df_new.groupby(['Season', 'WTeamID']).mean().reset_index()\nncaa = pd.read_csv(\"../input/mteam-avg/team_avg1.csv\")\n\nncaa_predict = rf_model.predict(ncaa)\n#print(\"2025 NCAA new set of data accuracy score: \", accuracy_score(y_train,ncaa_predict))\nprobabilities = rf_model.predict_proba(ncaa)[:,1]\n\nmncaa_result = pd.DataFrame({\n    'ID': ncaa['Season'].astype(str) + '_' + ncaa['WTeamID'].astype(str) + '_' + ncaa['LTeamID'].astype(str),\n    'Pred': probabilities\n})\n\nmncaa_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-18T13:09:05.017401Z","iopub.execute_input":"2025-03-18T13:09:05.017724Z","iopub.status.idle":"2025-03-18T13:09:07.949745Z","shell.execute_reply.started":"2025-03-18T13:09:05.017699Z","shell.execute_reply":"2025-03-18T13:09:07.948761Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Womens NCAA prediction:","metadata":{}},{"cell_type":"code","source":"wseason, wteams, wncaatourseed, wncaatouresult, wregularseasonresult, wgamecity,wconfergames, wsecondaryresult, wncaatourslots,= dfs['WSeasons.csv'],dfs['WTeams.csv'], dfs['WNCAATourneySeeds.csv'], dfs['WNCAATourneyDetailedResults.csv'], dfs['WRegularSeasonDetailedResults.csv'],dfs['WGameCities.csv'],dfs['WConferenceTourneyGames.csv'], dfs['WSecondaryTourneyCompactResults.csv'],dfs['WNCAATourneySlots.csv']\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:36:49.432346Z","iopub.execute_input":"2025-03-17T14:36:49.432776Z","iopub.status.idle":"2025-03-17T14:36:49.438712Z","shell.execute_reply.started":"2025-03-17T14:36:49.432743Z","shell.execute_reply":"2025-03-17T14:36:49.437136Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wncaatouresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:36:58.286446Z","iopub.execute_input":"2025-03-17T14:36:58.286829Z","iopub.status.idle":"2025-03-17T14:36:58.361347Z","shell.execute_reply.started":"2025-03-17T14:36:58.286797Z","shell.execute_reply":"2025-03-17T14:36:58.360405Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wregularseasonresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:37:16.84892Z","iopub.execute_input":"2025-03-17T14:37:16.849393Z","iopub.status.idle":"2025-03-17T14:37:17.018106Z","shell.execute_reply.started":"2025-03-17T14:37:16.849361Z","shell.execute_reply":"2025-03-17T14:37:17.017205Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wconfergames.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:37:33.727906Z","iopub.execute_input":"2025-03-17T14:37:33.72825Z","iopub.status.idle":"2025-03-17T14:37:33.750217Z","shell.execute_reply.started":"2025-03-17T14:37:33.728224Z","shell.execute_reply":"2025-03-17T14:37:33.749246Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"wsecondaryresult.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:37:51.264179Z","iopub.execute_input":"2025-03-17T14:37:51.264516Z","iopub.status.idle":"2025-03-17T14:37:51.298266Z","shell.execute_reply.started":"2025-03-17T14:37:51.264489Z","shell.execute_reply":"2025-03-17T14:37:51.297266Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# merging datasets\nwncaatouresult['Gametype'] = 'WNCAAtour'\nwregularseasonresult['Gametype'] = 'WRegularseason'\nwsecondaryresult['Gametype'] = 'Wsecondary'\nwmerge_df = pd.concat([wncaatouresult,wregularseasonresult])\nwmerge_df['Outcome'] = 1\n\n# Create a reversed version of the data, so that each game appears twice.\n\nwmerge_reverse = wmerge_df.copy()\nwfeatures_to_swap = ['FGM', 'FGA', 'FGM3', 'FGA3', 'FTM', 'FTA', 'OR', 'DR', 'Ast', 'TO', 'Stl', 'Blk', 'PF']\nfor feature in wfeatures_to_swap:\n    wmerge_reverse[['W' + feature, 'L' + feature]] = wmerge_reverse[['L' + feature, 'W' + feature]]\n    \nwmerge_reverse['Outcome'] = 0\n\ndf_w = pd.concat([wmerge_df,wmerge_reverse])\ndf_w = df_w.drop('WLoc', axis = 'columns')\ndf_w.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:38:34.8294Z","iopub.execute_input":"2025-03-17T14:38:34.829797Z","iopub.status.idle":"2025-03-17T14:38:34.996873Z","shell.execute_reply.started":"2025-03-17T14:38:34.829767Z","shell.execute_reply":"2025-03-17T14:38:34.99581Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Feature Engineering for women dataset:\n","metadata":{}},{"cell_type":"code","source":"df_w['WFieldGoalPercentage'] = np.where(df_w['WFGA'] != 0, df_w['WFGM'] / df_w['WFGA'], 0)\ndf_w['WThreePointPercentage'] = np.where(df_w['WFGA3'] != 0, df_w['WFGM3'] / df_w['WFGA3'], 0)\ndf_w['WFreeThrowPercentage'] = np.where(df_w['WFTA'] != 0, df_w['WFTM'] / df_w['WFTA'], 0)\ndf_w['WEffectiveFieldGoalPercentage'] = np.where(df_w['WFGA'] != 0, (df_w['WFGM'] + 0.5 * df_w['WFGM3']) / df_w['WFGA'], 0)\n#df_w['WTrueShootingPercentage'] = np.where((2 * (df_w['WFGA'] + 0.475 * df_w['WFTA'])) != 0, df_w['WScore'] / (2 * (df_w['WFGA'] + 0.475 * df['WFTA'])), 0)\ndf_w['WTotalReboundRatio'] = np.where((df_w['LOR'] + df_w['LDR'] + df_w['WOR'] + df_w['WDR']) != 0,\n                                     (df_w['WOR'] + df_w['WDR']) / (df_w['LOR'] + df_w['LDR'] + df_w['WOR'] + df_w['WDR']),0)\ndf_w['WAssistTurnoverRatio'] = np.where(df_w['WTO'] != 0, df_w['WAst'] / df_w['WTO'], 0)\ndf_w['WStealTurnoverRatio'] = np.where(df_w['WTO'] != 0, df_w['WStl'] / df_w['WTO'], 0)\n\n\ndf_w['LFieldGoalPercentage'] = np.where(df_w['LFGA'] != 0, df_w['LFGM'] / df_w['LFGA'], 0)\ndf_w['LThreePointPercentage'] = np.where(df_w['LFGA3'] != 0, df_w['LFGM3'] / df_w['LFGA3'], 0)\ndf_w['LFreeThrowPercentage'] = np.where(df_w['LFTA'] != 0, df_w['LFTM'] / df_w['LFTA'], 0)\ndf_w['LEffectiveFieldGoalPercentage'] = np.where(df_w['LFGA'] != 0, (df_w['LFGM'] + 0.5 * df_w['LFGM3']) / df_w['LFGA'], 0)\ndf_w['LTrueShootingPercentage'] = np.where((2 * (df_w['LFGA'] + 0.475 * df_w['LFTA'])) != 0, df_w['LScore'] / (2 * (df_w['LFGA'] + 0.475 * df_w['LFTA'])), 0)\ndf_w['LTotalReboundRatio'] = np.where((df_w['WOR'] + df_w['WDR'] + df_w['LOR'] + df_w['LDR']) != 0,\n                                     (df_w['LOR'] + df_w['LDR']) / (df_w['WOR'] + df_w['WDR'] + df_w['LOR'] + df_w['LDR']),0)\ndf_w['LAssistTurnoverRatio'] = np.where(df_w['LTO'] != 0, df_w['LAst'] / df_w['LTO'], 0)\ndf_w['LStealTurnoverRatio'] = np.where(df_w['LTO'] != 0, df_w['LStl'] / df_w['LTO'], 0)\n\ndf_w['FieldGoalPercentage_diff'] = df_w['WFieldGoalPercentage'] - (df_w['LFGM'] / df_w['LFGA'])\ndf_w['ThreePointPercentage_diff'] = df_w['WThreePointPercentage'] - (df_w['LFGM3'] / df_w['LFGA3'])\ndf_w['FreeThrowPercentage_diff'] = df_w['WFreeThrowPercentage'] - (df_w['LFTM'] / df_w['LFTA'])\ndf_w['EffectiveFieldGoalPercentage_diff'] = df_w['WEffectiveFieldGoalPercentage'] - ((df_w['LFGM'] + 0.5 * df_w['LFGM3']) / df_w['LFGA'])\n#df_w['TrueShootingPercentage_diff'] = df_w['WTrueShootingPercentage'] - (df_w['LScore'] / (2 * (df_w['LFGA'] + 0.475 * df_w['LFTA'])))\n\n#df = df.drop('FreeThrowPercentage_diff', axis = 'columns')\n\ndummies1 = pd.get_dummies(df_w.Gametype)\ndf_w1 = pd.concat([df_w, dummies1], axis = 'columns')\nw_df = df_w1.drop('Gametype', axis = 'columns')\nw_df = w_df.dropna()\nw_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:39:26.553707Z","iopub.execute_input":"2025-03-17T14:39:26.554062Z","iopub.status.idle":"2025-03-17T14:39:26.875371Z","shell.execute_reply.started":"2025-03-17T14:39:26.554033Z","shell.execute_reply":"2025-03-17T14:39:26.874338Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Train the machine learning model for women:","metadata":{}},{"cell_type":"code","source":"X_w = w_df.drop(['Outcome'], axis = 'columns')\ny_w = w_df['Outcome']\n\nX_train, X_test, y_train, y_test = train_test_split(X_w, y_w, test_size = 0.2, random_state = 42)\n\nrf_model_w = RandomForestClassifier(n_estimators = 100, oob_score = True, warm_start = True, random_state = 42)\nrf_model_w.fit(X_train, y_train)\n\ny_predict_w = rf_model_w.predict(X_train)\n\ny_predict_w1 = rf_model_w.predict(X_test)\nprint(\"Training set accuracy score: \", accuracy_score(y_train,y_predict_w))\nprint(\"Test set accuracy score: \", accuracy_score(y_test,y_predict_w1))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:40:33.187497Z","iopub.execute_input":"2025-03-17T14:40:33.187895Z","iopub.status.idle":"2025-03-17T14:41:38.026904Z","shell.execute_reply.started":"2025-03-17T14:40:33.187867Z","shell.execute_reply":"2025-03-17T14:41:38.025724Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 2025-NCAA tournament prediction for women:","metadata":{}},{"cell_type":"code","source":"w_ncaa_new = dfs['SampleSubmissionStage2.csv']\nw_ncaa_new[['Season', 'WTeamID', 'LTeamID']] = w_ncaa_new['ID'].str.split('_', expand = True)\nw_ncaa_new = w_ncaa_new.drop(['ID','Pred'], axis = 'columns')\nw_ncaa_new['WTeamID'] = w_ncaa_new['WTeamID'].astype(int)\nw_ncaa_new['LTeamID'] = w_ncaa_new['LTeamID'].astype(int)\nw_ncaa_new['Season'] = w_ncaa_new['Season'].astype(int)\nw_ncaa_new = w_ncaa_new[(w_ncaa_new['WTeamID'] >= 3000) & (w_ncaa_new['WTeamID'] <= 3999) & (w_ncaa_new['LTeamID'] >= 3000) & (w_ncaa_new['LTeamID'] <= 3999)]\n\nw_team_avg_stats = w_df.groupby(['Season', 'WTeamID']).mean().reset_index()\n\nncaa_w = pd.read_csv(\"../input/wstats-avg/w_ncaa.csv\")\n\nwncaa_predict = rf_model_w.predict(ncaa_w)\nw_probabilities = rf_model_w.predict_proba(ncaa_w)[:,1]\n\nwncaa_result = pd.DataFrame({\n    'ID': ncaa_w['Season'].astype(str) + '_' + ncaa_w['WTeamID'].astype(str) + '_' + ncaa_w['LTeamID'].astype(str),\n    'Pred': w_probabilities\n})\n\nwncaa_result","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:47:55.287896Z","iopub.execute_input":"2025-03-17T14:47:55.288305Z","iopub.status.idle":"2025-03-17T14:47:59.599041Z","shell.execute_reply.started":"2025-03-17T14:47:55.28827Z","shell.execute_reply":"2025-03-17T14:47:59.597824Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Final Prediction for both men and women(All possible matchup):","metadata":{}},{"cell_type":"code","source":"ncaa_final_prediction = pd.concat([mncaa_result,wncaa_result])\nprint(\"NCAA final prediction for both Men and Women\")\nncaa_final_prediction","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T14:50:49.360357Z","iopub.execute_input":"2025-03-17T14:50:49.360873Z","iopub.status.idle":"2025-03-17T14:50:49.385182Z","shell.execute_reply.started":"2025-03-17T14:50:49.360826Z","shell.execute_reply":"2025-03-17T14:50:49.38326Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"","metadata":{}}]}